{"version":3,"file":"default-src_app_pipes_asset-pipes_module_ts-src_app_state_session-algorand_service_ts-src_app-52835a.js","mappings":"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","sources":["./src/app/pipes/asset-amount.pipe.ts","./src/app/pipes/asset-pipes.module.ts","./src/app/pipes/asset-symbol.pipe.ts","./src/app/services/algod.service.ts","./src/app/services/xrpl.service.ts","./src/app/services/xrpl.utils.ts","./src/app/state/session-algorand.service.ts","./src/app/state/session-xrpl.service.ts","./src/app/utils/assets/assets.common.ts","./src/app/utils/loading.helpers.ts","./src/schema/algorand.helpers.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport {\n  AssetAmount,\n  formatAssetAmount,\n} from 'src/app/utils/assets/assets.common';\n\n/** @see formatAssetAmount */\n@Pipe({\n  name: 'assetAmount',\n  pure: true,\n})\nexport class AssetAmountPipe implements PipeTransform {\n  transform(assetAmount?: AssetAmount | null): string | null | undefined {\n    return assetAmount ? formatAssetAmount(assetAmount) : assetAmount;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AssetAmountPipe } from 'src/app/pipes/asset-amount.pipe';\nimport { AssetSymbolPipe } from 'src/app/pipes/asset-symbol.pipe';\n\nconst declarations = [AssetAmountPipe, AssetSymbolPipe];\n\n@NgModule({\n  imports: [],\n  declarations,\n  exports: declarations,\n})\nexport class AssetPipesModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {\n  AssetAmount,\n  formatAssetSymbol,\n} from 'src/app/utils/assets/assets.common';\n\n/** @see formatAssetSymbol */\n@Pipe({\n  name: 'assetSymbol',\n  pure: true,\n})\nexport class AssetSymbolPipe implements PipeTransform {\n  transform(assetAmount?: AssetAmount | null): string | null | undefined {\n    return assetAmount ? formatAssetSymbol(assetAmount) : assetAmount;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport algosdk, { IntDecoding, Transaction } from 'algosdk';\nimport AlgodClient from 'algosdk/dist/types/src/client/v2/algod/algod';\nimport {\n  AccountData,\n  Asset,\n  TransactionConfirmation,\n  waitForConfirmation,\n} from 'src/app/services/algosdk.utils';\nimport { defined } from 'src/app/utils/errors/panic';\nimport { environment } from 'src/environments/environment';\nimport {\n  AssetTransferRequiredParameters,\n  makeAssetTransferTxnHelper,\n  makePaymentTxnHelper,\n  OptionalParameters,\n  RequiredParameters,\n} from 'src/schema/algorand.helpers';\n\n/**\n * This service wraps an instance of the algosdk {@link AlgodClient},\n * configured from {@link environment.algod}.\n *\n * Responsibilities:\n *\n * - Read account information\n * - Create, submit, and confirm transactions\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AlgodService {\n  protected algodClient: AlgodClient;\n\n  constructor() {\n    // TODO: Convert this DI-provided argument?\n    this.algodClient = getAlgodClientFromEnvironment();\n  }\n\n  async getAccountData(address: string): Promise<AccountData> {\n    const accountData = await this.algodClient.accountInformation(address).do();\n    // FIXME(Pi): Unchecked cast; should be validated.\n    return accountData as AccountData;\n  }\n\n  /**\n   * @see https://developer.algorand.org/docs/rest-apis/algod/v2/#get-v2assetsasset-id\n   */\n  async getAsset(assetId: number): Promise<Asset> {\n    const asset = await this.algodClient.getAssetByID(assetId).do();\n    // FIXME(Pi): Unchecked cast; should be validated.\n    return asset as Asset;\n  }\n\n  async createUnsignedTransaction(\n    required: RequiredParameters,\n    optional?: OptionalParameters\n  ): Promise<Transaction> {\n    const suggestedParams = await this.algodClient.getTransactionParams().do();\n    console.log('createUnsignedTransaction', 'got:', { suggestedParams });\n    const transaction = makePaymentTxnHelper(\n      suggestedParams,\n      required,\n      optional\n    );\n    console.log('createUnsignedTransaction', 'created:', { transaction });\n    return transaction;\n  }\n\n  async createUnsignedAssetTransferTxn(\n    required: AssetTransferRequiredParameters,\n    optional?: OptionalParameters\n  ): Promise<Transaction> {\n    const suggestedParams = await this.algodClient.getTransactionParams().do();\n    return makeAssetTransferTxnHelper(suggestedParams, required, optional);\n  }\n\n  async createUnsignedAssetOptInTxn(\n    address: string,\n    assetIndex: number\n  ): Promise<Transaction> {\n    return await this.createUnsignedAssetTransferTxn({\n      from: address,\n      to: address,\n      amount: 0,\n      assetIndex,\n    });\n  }\n\n  async submitSignedTransaction(\n    signedTxn: Uint8Array\n  ): Promise<{ txId: string }> {\n    return await this.algodClient.sendRawTransaction(signedTxn).do();\n  }\n\n  async waitForTransactionConfirmation(\n    txId: string\n  ): Promise<TransactionConfirmation> {\n    // TODO: Report rejection and timeout in a way the UI can use.\n    return waitForConfirmation(this.algodClient, txId, 4);\n  }\n\n  /** Combine {@link submitSignedTransaction} and {@link waitForTransactionConfirmation}. */\n  async submitAndConfirmTransaction(\n    signedTxn: Uint8Array\n  ): Promise<TransactionConfirmation> {\n    const { txId } = await this.submitSignedTransaction(signedTxn);\n    return await this.waitForTransactionConfirmation(txId);\n  }\n}\n\n/**\n * Construct an {@link AlgodClient} from {@link environment.algod}.\n *\n * In particular, this enforces {@link IntDecoding.SAFE}: we don't currently accommodate `bigint` values.\n */\nconst getAlgodClientFromEnvironment = (): AlgodClient => {\n  const algod = defined(environment.algod, 'environment.algod not configured');\n  const client = new algosdk.Algodv2(algod.token, algod.baseServer, algod.port);\n  client.setIntEncoding(IntDecoding.SAFE);\n  return client;\n};\n","import { Injectable } from '@angular/core';\nimport { checkRippledErrorResponse } from 'src/app/services/xrpl.utils';\nimport { defined } from 'src/app/utils/errors/panic';\nimport { environment } from 'src/environments/environment';\nimport * as xrpl from 'xrpl';\nimport { IssuedCurrencyAmount } from 'xrpl/dist/npm/models/common/index';\n\n/**\n * This service wraps an instance of the algosdk {@link xrpl.Client},\n * configured from {@link environment.xrplClient}.\n *\n * Responsibilities:\n *\n * - Read account and balance information\n * - Create, submit, and confirm transactions\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class XrplService {\n  constructor() {\n    // Call this once on construction as a smoke test.\n    this.getClient();\n  }\n\n  /**\n   * Ping the server, to test connectivity.\n   *\n   * @see https://xrpl.org/ping.html\n   */\n  async ping(): Promise<xrpl.PingResponse> {\n    return this.withConnection(\n      async (client) => await client.request({ command: 'ping' })\n    );\n  }\n\n  /**\n   * Retrieve information about an account, its activity, and its XRP balance.\n   *\n   * This call defaults to:\n   *\n   * - `ledger_index: 'validated'`\n   * - `strict: true`\n   *\n   * @see https://xrpl.org/account_info.html\n   */\n  async getAccountInfo(\n    request: Omit<xrpl.AccountInfoRequest, 'command'>\n  ): Promise<xrpl.AccountInfoResponse> {\n    return await this.withConnection(\n      async (client) =>\n        await client.request({\n          ledger_index: 'validated',\n          strict: true,\n          ...request,\n          command: 'account_info',\n        })\n    );\n  }\n\n  /**\n   * Like {@link getAccountInfo}, but catch and return `undefined` for `actNotFound` errors.\n   */\n  async getAccountInfoIfExists(\n    request: Omit<xrpl.AccountInfoRequest, 'command'>\n  ): Promise<xrpl.AccountInfoResponse | undefined> {\n    try {\n      return await this.getAccountInfo(request);\n    } catch (err) {\n      const errorResponse: xrpl.ErrorResponse | undefined =\n        checkRippledErrorResponse(err);\n      if (errorResponse !== undefined) {\n        // Docs: https://xrpl.org/account_info.html#possible-errors\n        if (errorResponse.error === 'actNotFound') {\n          return undefined;\n        } else {\n          console.log(\n            'XrplService.getAccountInfoIfExists: unrecognised ErrorResponse:',\n            { errorResponse }\n          );\n        }\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Retrieve information about an account's trust lines.\n   *\n   * This call defaults to:\n   *\n   * - `ledger_index: 'validated'`\n   *\n   * @see https://xrpl.org/account_lines.html\n   */\n  async getAccountLines(\n    request: Omit<xrpl.AccountLinesRequest, 'command'>\n  ): Promise<xrpl.AccountLinesResponse> {\n    return await this.withConnection(\n      async (client) =>\n        await client.request({\n          ledger_index: 'validated',\n          ...request,\n          command: 'account_lines',\n        })\n    );\n  }\n\n  /**\n   * Wrap {@link xrpl.Client.getBalances}.\n   *\n   * @see https://js.xrpl.org/classes/Client.html#getBalances\n   */\n  async getBalances(address: string): Promise<Balance[]> {\n    return await this.withConnection(\n      async (client) => await client.getBalances(address)\n    );\n  }\n\n  async createUnsignedTransaction(\n    fromAddress: string,\n    toAddress: string,\n    amount: xrpl.Payment['Amount']\n  ): Promise<xrpl.Payment> {\n    const unpreparedTx: xrpl.Payment = {\n      Account: fromAddress,\n      TransactionType: 'Payment',\n      Amount: amount,\n      Destination: toAddress,\n    };\n    return await this.withConnection(\n      async (client) => await client.autofill(unpreparedTx)\n    );\n  }\n\n  async createUnsignedTrustSetTx(\n    fromAddress: string,\n    limitAmount: IssuedCurrencyAmount\n  ): Promise<xrpl.TrustSet> {\n    const unpreparedTx: xrpl.TrustSet = {\n      Account: fromAddress,\n      TransactionType: 'TrustSet',\n      LimitAmount: limitAmount,\n    };\n    return await this.withConnection(\n      async (client) => await client.autofill(unpreparedTx)\n    );\n  }\n\n  /**\n   * Submit and wait for a signed transaction.\n   *\n   * @see https://js.xrpl.org/classes/Client.html#submitAndWait\n   * @see https://xrpl.org/reliable-transaction-submission.html\n   */\n  async submitAndWaitForSigned(\n    signedTxEncoded: string\n  ): Promise<xrpl.TxResponse> {\n    return await this.withConnection(\n      async (client) => await client.submitAndWait(signedTxEncoded)\n    );\n  }\n\n  // For Reference: https://github.com/XRPLF/xrpl.js/blob/6e4868e6c7a03f0d48de1ddee5d9a88700ab5a7c/src/transaction/sign.ts#L54\n  /*\n  async submitTransaction(\n    tx: TransactionJSON,\n    signature: string\n  ): Promise<FormattedSubmitResponse> {\n    const signedTx: TransactionJSON = { ...tx, TxnSignature: signature };\n\n    const encodedTx = binaryCodec.encode(signedTx);\n\n    await this.xrplClient.connect();\n    const res = await this.xrplClient.submit(encodedTx);\n    await this.xrplClient.disconnect();\n\n    if (res.resultCode !==  'tesSUCCESS') {\n      throw new Error('');\n    } else {\n      console.log(res);\n      return res;\n    }\n  }\n*/\n\n  /**\n   * Run `f` with a connected {@link xrpl.Client}.\n   *\n   * In particular, this runs each request with a separate client instance,\n   * to avoid state conflicts.\n   */\n  protected async withConnection<T>(\n    f: (client: xrpl.Client) => Promise<T>\n  ): Promise<T> {\n    const xrplClient = this.getClient();\n    try {\n      await xrplClient.connect();\n      return await f(xrplClient);\n    } finally {\n      await xrplClient.disconnect();\n    }\n  }\n\n  protected getClient(): xrpl.Client {\n    return getXrplClientFromEnvironment();\n  }\n}\n\nexport type Balance = {\n  value: string;\n  currency: string;\n  issuer?: string;\n};\n\nconst getXrplClientFromEnvironment = (): xrpl.Client => {\n  const { server, options } = defined(\n    environment.xrplClient,\n    'environment.xrplClient not configured'\n  );\n  return new xrpl.Client(server, options);\n};\n","/* eslint-disable max-len -- long URL in comment */\n/**\n * Supporting code for XRPL.\n *\n * In particular, this provides a stand-alone implementation of the transaction\n * signing logic that's otherwise tied up in the XRPL.js wallet code.\n *\n * @todo We should look at migrating this logic entirely into the enclave?\n *\n * @see https://github.com/XRPLF/xrpl-dev-portal/blob/master/content/concepts/payment-system-basics/transaction-basics/understanding-signatures-draft.md\n * @see https://xrpl.org/serialization.html\n * @see https://github.com/XRPLF/xrpl.js/blob/xrpl%402.2.1/packages/xrpl/src/Wallet/index.ts#L257-L305\n */\n\nimport { bytesToHex, hexToBytes } from 'ripple-keypairs/dist/utils';\nimport { panic } from 'src/app/utils/errors/panic';\nimport * as xrpl from 'xrpl';\n\n/**\n * Convenience type alias for simple hex-encoded binary data,\n * as used throughout XRPL.\n */\nexport type HexString = string;\n\n/**\n * Prepare to sign `txnUnsigned` with `signingPubKey`.\n *\n * This returns:\n *\n * - `txnBeingSigned`: `txnUnsigned` with `SigningPubKey` added\n *\n * - `bytesToSignEncoded`: As encoded by {@link xrpl.encodeForSigning},\n *   ready for signature calculation\n */\nexport const txnBeforeSign = (\n  txnUnsigned: xrpl.Transaction,\n  signingPubKey: HexString\n): { txnBeingSigned: xrpl.Transaction; bytesToSignEncoded: HexString } => {\n  const txnBeingSigned: xrpl.Transaction = {\n    ...txnUnsigned,\n    SigningPubKey: signingPubKey,\n  };\n  return {\n    txnBeingSigned,\n    bytesToSignEncoded: xrpl.encodeForSigning(txnBeingSigned),\n  };\n};\n\n/**\n * Combine `txnBeingSigned` with its `txnSignature`\n *\n * This returns:\n *\n * - `txnSigned`: `txnBeingSigned` with `TxnSignature` added\n * - `txnSignedEncoded`: As encoded by {@link xrpl.encode},\n *   ready for submission\n */\nexport const txnAfterSign = (\n  txnBeingSigned: xrpl.Transaction,\n  txnSignature: HexString\n): { txnSigned: xrpl.Transaction; txnSignedEncoded: HexString } => {\n  const txnSigned: xrpl.Transaction = {\n    ...txnBeingSigned,\n    TxnSignature: txnSignature,\n  };\n  return { txnSigned, txnSignedEncoded: xrpl.encode(txnSigned) };\n};\n\n/**\n * Like {@link hexToBytes}, but produce {@link Uint8Array}.\n */\nexport const hexToUint8Array = (hex: HexString): Uint8Array =>\n  Uint8Array.from(hexToBytes(hex));\n\n/**\n * Like {@link bytesToHex}, but consume {@link Uint8Array}.\n *\n * This mainly exists to work around this bug:\n * - <https://github.com/XRPLF/xrpl.js/pull/1975>\n */\nexport const uint8ArrayToHex = (array: Uint8Array): HexString =>\n  bytesToHex(Array.from(array));\n\n// Background: https://xrpl.org/reliable-transaction-submission.html#verification\n\nexport type TxSuccessReport = {\n  succeeded: boolean;\n  resultCode: xrpl.TransactionMetadata['TransactionResult'];\n};\n\n/** Check whether a transaction succeeded, by response. */\nexport const checkTxResponseSucceeded = (\n  txResponse: xrpl.TxResponse\n): TxSuccessReport =>\n  checkTransactionMetadataSucceeded(getTxResponseMetadata(txResponse));\n\n/** Check whether a transaction succeeded, by metadata. */\nexport const checkTransactionMetadataSucceeded = (\n  meta: xrpl.TransactionMetadata\n): TxSuccessReport => ({\n  succeeded: meta.TransactionResult === 'tesSUCCESS',\n  resultCode: meta.TransactionResult,\n});\n\n/** Get transaction metadata from response, or panic. */\nexport const getTxResponseMetadata = (\n  txResponse: xrpl.TxResponse\n): xrpl.TransactionMetadata => {\n  const meta = txResponse.result.meta;\n  if (typeof meta === 'string') {\n    throw panic('getTxResponseMetadata: unexpected string meta:', {\n      txResponse,\n    });\n  } else if (meta === undefined) {\n    throw panic('getTxResponseMetadata: unexpected undefined meta:', {\n      txResponse,\n    });\n  } else {\n    return meta;\n  }\n};\n\n/**\n * Check for `RippledError`, and extract its error response.\n *\n * This verifies that {@link xrpl.ErrorResponse.status} is `\"error\"`, at least.\n */\nexport const checkRippledErrorResponse = (\n  err: xrpl.RippledError | unknown\n): xrpl.ErrorResponse | undefined => {\n  if (err instanceof xrpl.RippledError) {\n    const maybeResponse = err.data as xrpl.ErrorResponse | any;\n    if (\n      typeof maybeResponse === 'object' &&\n      'status' in maybeResponse &&\n      maybeResponse.status === 'error'\n    ) {\n      return maybeResponse as xrpl.ErrorResponse;\n    }\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { Transaction } from 'algosdk';\nimport { AlgodService } from 'src/app/services/algod.service';\nimport {\n  Algos,\n  Asset,\n  AssetParams,\n  convertToMicroAlgos,\n  TransactionConfirmation,\n} from 'src/app/services/algosdk.utils';\nimport { EnclaveService } from 'src/app/services/enclave/index';\nimport { SessionService } from 'src/app/state/session.service';\nimport { panic } from 'src/app/utils/errors/panic';\nimport { TransactionSigned, TransactionToSign } from 'src/schema/actions';\nimport { SessionQuery } from './session.query';\nimport { SessionStore } from './session.store';\n\n/**\n * This service manages session state and operations related to the Algorand ledger.\n */\n@Injectable({ providedIn: 'root' })\nexport class SessionAlgorandService {\n  constructor(\n    private sessionStore: SessionStore,\n    private sessionQuery: SessionQuery,\n    private sessionService: SessionService,\n    private enclaveService: EnclaveService,\n    private algodService: AlgodService\n  ) {}\n\n  /**\n   * Load the current wallet's Algorand account status from {@link AlgodService}.\n   *\n   * This updates {@link SessionState#algorandAccountData}.\n   */\n  async loadAccountData(): Promise<void> {\n    const { wallet } = this.sessionQuery.assumeActiveSession();\n    const algorandAccountData = await this.algodService.getAccountData(\n      wallet.algorand_address_base32\n    );\n    this.sessionStore.update({ algorandAccountData });\n  }\n\n  /**\n   * Load the current wallet's asset holdings' parameters.\n   *\n   * This updates {@link SessionState.algorandAssetParams}.\n   */\n  async loadAssetParams(): Promise<void> {\n    const assetHoldings = this.sessionQuery.getAlgorandAssetHoldings();\n    if (assetHoldings) {\n      const assets: Asset[] = await Promise.all(\n        assetHoldings.map(\n          (assetHolding): Promise<Asset> =>\n            this.algodService.getAsset(assetHolding['asset-id'])\n        )\n      );\n      const algorandAssetParams: Record<number, AssetParams> =\n        Object.fromEntries(assets.map(({ index, params }) => [index, params]));\n      this.sessionStore.update({ algorandAssetParams });\n    }\n  }\n\n  /**\n   * Send Algos to another account.\n   */\n  async sendAlgos(\n    receiverId: string,\n    amountInAlgos: Algos\n  ): Promise<TransactionConfirmation> {\n    const { wallet } = this.sessionQuery.assumeActiveSession();\n\n    const amountInMicroAlgos = convertToMicroAlgos(amountInAlgos);\n    const transaction = await this.algodService.createUnsignedTransaction({\n      amount: amountInMicroAlgos,\n      from: wallet.algorand_address_base32,\n      to: receiverId,\n    });\n    return await this.sendTransaction(transaction);\n  }\n\n  async sendAssetOptIn(assetId: number): Promise<TransactionConfirmation> {\n    const { wallet } = this.sessionQuery.assumeActiveSession();\n    const transaction = await this.algodService.createUnsignedAssetOptInTxn(\n      wallet.algorand_address_base32,\n      assetId\n    );\n    return await this.sendTransaction(transaction);\n  }\n\n  async sendAssetFunds(\n    assetId: number,\n    receiverId: string,\n    amount: number\n  ): Promise<TransactionConfirmation> {\n    const { wallet } = this.sessionQuery.assumeActiveSession();\n    const transaction = await this.algodService.createUnsignedAssetTransferTxn({\n      from: wallet.algorand_address_base32,\n      to: receiverId,\n      amount,\n      assetIndex: assetId,\n    });\n    return await this.sendTransaction(transaction);\n  }\n\n  /**\n   * Helper: Sign, submit, and confirm the given transaction.\n   */\n  protected async sendTransaction(\n    transaction: Transaction\n  ): Promise<TransactionConfirmation> {\n    const unsigned: TransactionToSign = {\n      AlgorandTransaction: { transaction_bytes: transaction.bytesToSign() },\n    };\n    const signed: TransactionSigned = await this.sessionService.signTransaction(\n      unsigned\n    );\n\n    if ('AlgorandTransactionSigned' in signed) {\n      console.log('SessionAlgorandService.sendTransaction:', { signed });\n      const { signed_transaction_bytes } = signed.AlgorandTransactionSigned;\n      const confirmation = await this.algodService.submitAndConfirmTransaction(\n        signed_transaction_bytes\n      );\n      console.log('SessionAlgorandService.sendTransaction:', { confirmation });\n\n      await this.loadAccountData(); // FIXME(Pi): Move to caller?\n\n      return confirmation;\n    } else {\n      throw panic(\n        'SessionAlgorandService.sendTransaction: expected AlgorandTransactionSigned, got:',\n        signed\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { firstValueFrom } from 'rxjs';\nimport { EnclaveService } from 'src/app/services/enclave/index';\nimport { XrplService } from 'src/app/services/xrpl.service';\nimport {\n  hexToUint8Array,\n  txnAfterSign,\n  txnBeforeSign,\n  uint8ArrayToHex,\n} from 'src/app/services/xrpl.utils';\nimport { SessionService } from 'src/app/state/session.service';\nimport { withLoggedExchange } from 'src/app/utils/console.helpers';\nimport { panic } from 'src/app/utils/errors/panic';\nimport { parseNumber } from 'src/app/utils/validators';\nimport { ifDefined } from 'src/helpers/helpers';\nimport { TransactionSigned, TransactionToSign } from 'src/schema/actions';\nimport * as xrpl from 'xrpl';\nimport { IssuedCurrencyAmount } from 'xrpl/dist/npm/models/common/index';\nimport { Trustline } from 'xrpl/dist/npm/models/methods/accountLines';\nimport { SessionQuery } from './session.query';\nimport { SessionStore, XrplBalance } from './session.store';\n\n/**\n * This service manages session state and operations related to the XRP ledger.\n */\n@Injectable({ providedIn: 'root' })\nexport class SessionXrplService {\n  constructor(\n    private sessionStore: SessionStore,\n    private sessionQuery: SessionQuery,\n    private sessionService: SessionService,\n    private enclaveService: EnclaveService,\n    private xrplService: XrplService\n  ) {}\n\n  /**\n   * Load the current wallet's XRPL account info from {@link XrplService}.\n   *\n   * This updates:\n   *\n   * - {@link import('./session.store').SessionState#xrplAccountRoot}.\n   * - {@link import('./session.store').SessionState#xrplBalances}.\n   */\n  async loadAccountData(): Promise<void> {\n    const { wallet } = this.sessionQuery.assumeActiveSession();\n    const xrplAddress = wallet.xrpl_account.address_base58;\n\n    // TODO: Fetch the following in parallel, sharing a connection context.\n\n    // Get AccountRoot entry:\n    const accountInfo = await this.xrplService.getAccountInfoIfExists({\n      account: xrplAddress,\n    });\n    if (accountInfo === undefined) {\n      console.log(\n        'SessionXrplService.loadAccountData: account not found, bailing out',\n        { xrplAddress }\n      );\n      return;\n    }\n    const xrplAccountRoot: xrpl.LedgerEntry.AccountRoot =\n      accountInfo.result.account_data;\n\n    // Get account's trust lines:\n    const accountLines = await this.xrplService.getAccountLines({\n      account: xrplAddress,\n    });\n    const xrplTrustlines: Trustline[] = accountLines.result.lines;\n\n    // Get balances:\n    const xrplBalances: XrplBalance[] = await this.xrplService.getBalances(\n      xrplAddress\n    );\n\n    this.sessionStore.update({ xrplAccountRoot, xrplTrustlines, xrplBalances });\n  }\n\n  async sendFunds(\n    receiverId: string,\n    amount: xrpl.Payment['Amount']\n  ): Promise<xrpl.TxResponse> {\n    const { wallet } = this.sessionQuery.assumeActiveSession();\n\n    const preparedTx: xrpl.Payment = await withLoggedExchange(\n      'SessionXrplService.sendFunds: XrplService.createUnsignedTransaction:',\n      async () =>\n        await this.xrplService.createUnsignedTransaction(\n          wallet.xrpl_account.address_base58,\n          receiverId,\n          amount\n        ),\n      { from: wallet.xrpl_account.address_base58, to: receiverId, amount }\n    );\n\n    return await this.sendTransaction(preparedTx);\n  }\n\n  /**\n   * Sign and send a `TrustSet` transaction from the active session's wallet.\n   *\n   * @see https://xrpl.org/trustset.html\n   * @see XrplService.createUnsignedTrustSetTx\n   */\n  async sendTrustSetTx(\n    limitAmount: IssuedCurrencyAmount\n  ): Promise<xrpl.TxResponse> {\n    const { wallet } = this.sessionQuery.assumeActiveSession();\n\n    const preparedTx: xrpl.TrustSet = await withLoggedExchange(\n      'SessionXrplService.sendTrustSetTx: XrplService.createUnsignedTrustSetTx:',\n      async () =>\n        await this.xrplService.createUnsignedTrustSetTx(\n          wallet.xrpl_account.address_base58,\n          limitAmount\n        ),\n      { from: wallet.xrpl_account.address_base58, limitAmount }\n    );\n\n    return await this.sendTransaction(preparedTx);\n  }\n\n  /**\n   * Check trustline opt-in for each of this account's trust lines.\n   *\n   * @return The responses to `TrustSet` transactions sent out (empty if none sent)\n   * @see checkTrustlineOptIn\n   */\n  async checkTrustlineOptIns(): Promise<xrpl.TxResponse[]> {\n    // TODO(Pi): Check for necessary owner reserves before sending.\n    //           See: https://xrpl.org/reserves.html\n\n    const trustLines =\n      (await firstValueFrom(this.sessionQuery.xrplTrustlines)) ?? [];\n\n    const txResponses: xrpl.TxResponse[] = [];\n    for (const trustLine of trustLines) {\n      ifDefined(await this.checkTrustlineOptIn(trustLine), (txResponse) =>\n        txResponses.push(txResponse)\n      );\n    }\n    return txResponses;\n  }\n\n  /**\n   * Helper: Check trustline opt-in for the given trust-line.\n   *\n   * This sends a `TrustSet` transaction matching the peer's limit\n   * if the active session's wallet's limit is zero.\n   *\n   * @return the `TrustSet` response, or undefined\n   */\n  async checkTrustlineOptIn(\n    trustline: Trustline\n  ): Promise<xrpl.TxResponse | undefined> {\n    const limit_peer = parseNumber(trustline.limit_peer);\n    if (limit_peer === undefined) {\n      throw panic(\n        'SessionXrplService.checkTrustlineOptIn: bad limit_peer:',\n        trustline\n      );\n    }\n\n    if (trustline.limit === '0' && 0 < limit_peer) {\n      const limitAmount = {\n        currency: trustline.currency,\n        issuer: trustline.account,\n        value: trustline.limit_peer, // XXX: For now, just match the peer's limit.\n      };\n      return await withLoggedExchange(\n        'SessionXrplService.checkTrustlineOptIn: sending TrustSet',\n        async () => await this.sendTrustSetTx(limitAmount),\n        limitAmount\n      );\n    }\n  }\n\n  /**\n   * Helper: Sign, submit, and confirm the given transaction.\n   *\n   * NOTE: This does not check for success: the caller is responsible for that.\n   */\n  protected async sendTransaction(\n    txnUnsigned: xrpl.Transaction\n  ): Promise<xrpl.TxResponse> {\n    const { wallet } = this.sessionQuery.assumeActiveSession();\n\n    const { txnBeingSigned, bytesToSignEncoded } = txnBeforeSign(\n      txnUnsigned,\n      wallet.xrpl_account.public_key_hex\n    );\n\n    const transactionToSign: TransactionToSign = {\n      XrplTransaction: {\n        transaction_bytes: hexToUint8Array(bytesToSignEncoded),\n      },\n    };\n    const signed: TransactionSigned = await this.sessionService.signTransaction(\n      transactionToSign\n    );\n\n    if ('XrplTransactionSigned' in signed) {\n      const { signature_bytes } = signed.XrplTransactionSigned;\n\n      const { txnSigned, txnSignedEncoded } = txnAfterSign(\n        txnBeingSigned,\n        uint8ArrayToHex(signature_bytes)\n      );\n\n      const txResponse: xrpl.TxResponse = await withLoggedExchange(\n        'SessionXrplService.sendTransaction: signed, submitting:',\n        async () =>\n          await this.xrplService.submitAndWaitForSigned(txnSignedEncoded),\n        txnSignedEncoded\n      );\n\n      await this.loadAccountData(); // FIXME(Pi): Move to caller?\n\n      return txResponse;\n    } else {\n      throw panic(\n        'SessionXrplService.sendTransaction: expected XrplTransactionSigned, got:',\n        signed\n      );\n    }\n  }\n}\n","/**\n * Common representation types and code for working with asset amounts.\n */\n\nimport { formatNumber } from '@angular/common';\n\n/**\n * Application-wide description of how to display a particular asset.\n *\n * Assets may be well-known and predefined, or dynamic.\n */\nexport type AssetDisplay = {\n  assetSymbol: string;\n  minDigits: number;\n  maxDigits: number;\n};\n\n/**\n * Application-wide description of an asset's ledger.\n *\n * This describes where a particular asset resides or is defined on.\n * Subtypes may  add additional information here, such as asset IDs or conversion factors.\n */\nexport type LedgerInfo = {\n  type: string;\n};\n\n/**\n * An amount denominated in a particular asset on a particular ledger.\n */\nexport type AssetAmount = {\n  amount: number;\n  assetDisplay: AssetDisplay;\n  ledgerInfo: LedgerInfo;\n};\n\n/** Format the asset symbol of an amount. */\nexport const formatAssetSymbol = (assetAmount: AssetAmount) =>\n  assetAmount.assetDisplay.assetSymbol;\n\n/** Default locale, matching Angular's {@link formatNumber}. */\nconst LOCALE = 'en-US';\n\n/** Format an asset amount with the right number of fractional digits. .*/\nexport const formatAssetAmount = ({\n  amount,\n  assetDisplay: { maxDigits, minDigits },\n}: AssetAmount) => formatNumber(amount, LOCALE, `1.${minDigits}-${maxDigits}`);\n\n/** Construct a new asset amount with the same metadata as a base value. */\nexport const assetAmountFromBase = (\n  amount: number,\n  { assetDisplay, ledgerInfo }: AssetAmount\n): AssetAmount => ({\n  amount,\n  assetDisplay,\n  ledgerInfo,\n});\n","import { LoadingController } from '@ionic/angular';\nimport { LoadingOptions } from '@ionic/core';\n\n// Show the default loading overlay around `f()`.\nexport const withLoadingOverlay = async <T>(\n  loadingController: LoadingController,\n  f: () => Promise<T>\n): Promise<T> => await withLoadingOverlayOpts(loadingController, {}, f);\n\n// Show a loading overlay with `options` around `f()`.\nexport const withLoadingOverlayOpts = async <T>(\n  loadingController: LoadingController,\n  options: LoadingOptions,\n  f: () => Promise<T>\n): Promise<T> => {\n  const loading = await loadingController.create(options);\n  await loading.present();\n  try {\n    return await f();\n  } finally {\n    await loading.dismiss();\n  }\n};\n","import algosdk, { SuggestedParams, Transaction } from 'algosdk';\nimport { PaymentTxn } from 'algosdk/dist/types/src/types/transactions';\nimport { AssetTransferTransaction } from 'algosdk/dist/types/src/types/transactions/asset';\nimport { RenameProperty } from 'algosdk/dist/types/src/types/utils';\n\nexport type RequiredParameters = Pick<PaymentTxn, 'from' | 'to' | 'amount'>;\n\nexport type OptionalParameters = {\n  options?: OptionParameters;\n  modifySuggested?: (suggested: SuggestedParams) => SuggestedParams;\n};\n\nexport type OptionParameters = RenameProperty<\n  Pick<PaymentTxn, 'closeRemainderTo' | 'note' | 'reKeyTo'>,\n  'reKeyTo',\n  'rekeyTo'\n>;\n\n/** Wrap `makePaymentTxnWithSuggestedParamsFromObject` with more convenient argument handling. */\nexport const makePaymentTxnHelper = (\n  suggested: SuggestedParams,\n  required: RequiredParameters,\n  optional?: OptionalParameters\n): Transaction => {\n  const unmodified = <O>(o: O): O => o;\n  const suggestedParams = (optional?.modifySuggested ?? unmodified)(suggested);\n  return algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    suggestedParams,\n    ...optional?.options,\n    ...required,\n  });\n};\n\nexport type AssetTransferRequiredParameters = Pick<\n  AssetTransferTransaction,\n  'from' | 'to' | 'amount' | 'assetIndex'\n>;\n\nexport const makeAssetTransferTxnHelper = (\n  suggested: SuggestedParams,\n  required: AssetTransferRequiredParameters,\n  optional?: OptionalParameters\n): Transaction => {\n  const unmodified = <O>(o: O): O => o;\n  const suggestedParams = (optional?.modifySuggested ?? unmodified)(suggested);\n  return algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    suggestedParams,\n    ...optional?.options,\n    ...required,\n  });\n};\n"],"names":["algosdk","IntDecoding","waitForConfirmation","defined","environment","makeAssetTransferTxnHelper","makePaymentTxnHelper","AlgodService","constructor","algodClient","getAlgodClientFromEnvironment","getAccountData","address","accountData","accountInformation","do","getAsset","assetId","asset","getAssetByID","createUnsignedTransaction","required","optional","suggestedParams","getTransactionParams","console","log","transaction","createUnsignedAssetTransferTxn","createUnsignedAssetOptInTxn","assetIndex","from","to","amount","submitSignedTransaction","signedTxn","sendRawTransaction","waitForTransactionConfirmation","txId","submitAndConfirmTransaction","factory","providedIn","algod","client","Algodv2","token","baseServer","port","setIntEncoding","SAFE","checkRippledErrorResponse","xrpl","XrplService","getClient","ping","withConnection","request","command","getAccountInfo","Object","ledger_index","strict","getAccountInfoIfExists","err","errorResponse","undefined","error","getAccountLines","getBalances","fromAddress","toAddress","unpreparedTx","Account","TransactionType","Amount","Destination","autofill","createUnsignedTrustSetTx","limitAmount","LimitAmount","submitAndWaitForSigned","signedTxEncoded","submitAndWait","f","xrplClient","connect","disconnect","getXrplClientFromEnvironment","server","options","Client","convertToMicroAlgos","panic","SessionAlgorandService","sessionStore","sessionQuery","sessionService","enclaveService","algodService","loadAccountData","wallet","assumeActiveSession","algorandAccountData","algorand_address_base32","update","loadAssetParams","assetHoldings","getAlgorandAssetHoldings","assets","Promise","all","map","assetHolding","algorandAssetParams","fromEntries","index","params","sendAlgos","receiverId","amountInAlgos","amountInMicroAlgos","sendTransaction","sendAssetOptIn","sendAssetFunds","unsigned","AlgorandTransaction","transaction_bytes","bytesToSign","signed","signTransaction","signed_transaction_bytes","AlgorandTransactionSigned","confirmation","i0","firstValueFrom","hexToUint8Array","txnAfterSign","txnBeforeSign","uint8ArrayToHex","withLoggedExchange","parseNumber","ifDefined","SessionXrplService","xrplService","xrplAddress","xrpl_account","address_base58","accountInfo","account","xrplAccountRoot","result","account_data","accountLines","xrplTrustlines","lines","xrplBalances","sendFunds","preparedTx","sendTrustSetTx","checkTrustlineOptIns","trustLines","_a","txResponses","trustLine","checkTrustlineOptIn","txResponse","push","trustline","limit_peer","limit","currency","issuer","value","txnUnsigned","txnBeingSigned","bytesToSignEncoded","public_key_hex","transactionToSign","XrplTransaction","signature_bytes","XrplTransactionSigned","txnSigned","txnSignedEncoded","withLoadingOverlay","loadingController","withLoadingOverlayOpts","loading","create","present","dismiss"],"sourceRoot":"webpack:///"}