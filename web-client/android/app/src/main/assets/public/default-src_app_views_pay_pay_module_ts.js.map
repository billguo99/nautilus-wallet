{"version":3,"file":"default-src_app_views_pay_pay_module_ts.js","mappings":"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","sources":["./src/app/components/pay-amount-confirm/pay-amount-confirm.component.ts","./src/app/components/pay-amount-confirm/pay-amount-confirm.component.html","./src/app/components/pay-amount-confirm/pay-amount-confirm.module.ts","./src/app/components/pay-amount-form/pay-amount-form.component.ts","./src/app/components/pay-amount-form/pay-amount-form.component.html","./src/app/components/pay-amount-form/pay-amount-form.module.ts","./src/app/components/pay-from-to/pay-from-to.component.ts","./src/app/components/pay-from-to/pay-from-to.component.html","./src/app/components/pay-from-to/pay-from-to.module.ts","./src/app/components/pay/pay.component.ts","./src/app/components/pay/pay.component.html","./src/app/components/pay/pay.module.ts","./src/app/components/pure-pay-page/pure-pay-page.component.ts","./src/app/components/pure-pay-page/pure-pay-page.component.html","./src/app/components/pure-pay-page/pure-pay-page.module.ts","./src/app/utils/assets/assets.config.ts","./src/app/views/pay/pay-routing.module.ts","./src/app/views/pay/pay.module.ts","./src/app/views/pay/pay.page.ts","./src/app/views/pay/pay.page.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AssetAmount,\n  assetAmountFromBase,\n} from 'src/app/utils/assets/assets.common';\nimport { defined } from 'src/app/utils/errors/panic';\nimport { ifDefined } from 'src/helpers/helpers';\n\n/**\n * Show a summary of a user balance and recipient address,\n * and capture an amount to pay to the recipient.\n *\n * This combines {@link PayFromToComponent} and {@link PayAmountFormComponent}.\n */\n@Component({\n  selector: 'app-pay-amount-confirm',\n  templateUrl: './pay-amount-confirm.component.html',\n  styleUrls: ['./pay-amount-confirm.component.scss'],\n})\nexport class PayAmountConfirmComponent implements OnInit {\n  /** The current user's name. */\n  @Input() name?: string | null;\n\n  /** A balance held by the current user. */\n  @Input() balance?: AssetAmount | null;\n\n  /** The address to receive the payment. */\n  @Input() receiverAddress?: string | null;\n\n  /** (Optional) A limit to impose on the transaction amount. */\n  @Input() transactionLimit?: number | null;\n\n  /**\n   * Emit the amount confirmed by the user.\n   * This will be in the same asset / currency as {@link this.balance}\n   */\n  @Output() amountConfirmed = new EventEmitter<AssetAmount>();\n\n  /** @see PayAmountFormComponent.autofocus */\n  @Input() autofocus = true;\n\n  /** @see PayAmountFormComponent.setInitialAmountValue */\n  @Input() setInitialAmountValue?: string;\n\n  constructor() {}\n\n  /** Limit the available balance by the transaction limit, if defined. */\n  get maxAmount() {\n    return ifDefined(this.balance, (balance) =>\n      this.transactionLimit !== undefined && this.transactionLimit !== null\n        ? Math.min(balance.amount, this.transactionLimit)\n        : balance.amount\n    );\n  }\n\n  ngOnInit() {}\n\n  /** Associate the submitted amount with the balance's asset info, and emit. */\n  onAmountSubmitted(amount: number): void {\n    const balance = defined(\n      this.balance ?? undefined,\n      'PayAmountConfirmComponent.onAmountSubmitted: unexpected undefined: this.balance'\n    );\n    const assetAmount: AssetAmount = assetAmountFromBase(amount, balance);\n    // TODO: Confirmation dialog?\n    this.amountConfirmed.emit(assetAmount);\n  }\n}\n","<ion-grid>\n  <ion-row>\n    <ion-col>\n      <app-pay-from-to\n        [name]=\"name\"\n        [balance]=\"balance\"\n        [receiverAddress]=\"receiverAddress\"\n      ></app-pay-from-to>\n    </ion-col>\n  </ion-row>\n\n  <ion-row>\n    <ion-col>\n      <!--\n        NOTE(Pi): <app-pay-from-to> is inside an <ion-card>,\n        which gives it some extra margin compared to <app-pay-amount-form>,\n        which isn't inside a margined contained.\n\n        Add an outer .ion-margin here to balance them out.\n      -->\n      <div class=\"ion-margin\">\n        <app-pay-amount-form\n          [maxAmount]=\"maxAmount\"\n          (amountSubmitted)=\"onAmountSubmitted($event)\"\n          [autofocus]=\"autofocus\"\n          [setInitialAmountValue]=\"setInitialAmountValue\"\n        ></app-pay-amount-form>\n\n        <p class=\"text-sm text-center\">\n          Please check payment amount carefully. Transaction fees\n          <!-- XXX(Pi): Comment this amount out for now, until we have a better idea of what's needed here. -->\n          <!-- up to R0.01 -->\n          apply.\n        </p>\n      </div>\n    </ion-col>\n  </ion-row>\n</ion-grid>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { PayAmountFormComponentModule } from 'src/app/components/pay-amount-form/pay-amount-form.module';\nimport { PayFromToModule } from 'src/app/components/pay-from-to/pay-from-to.module';\nimport { PayAmountConfirmComponent } from './pay-amount-confirm.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    PayFromToModule,\n    PayAmountFormComponentModule,\n  ],\n  declarations: [PayAmountConfirmComponent],\n  exports: [PayAmountConfirmComponent],\n})\nexport class PayAmountConfirmComponentModule {}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { defined } from 'src/app/utils/errors/panic';\nimport {\n  MaxValidationError,\n  MinValidationError,\n  RequiredValidationError,\n} from 'src/app/utils/validation.errors';\nimport {\n  NumericValidationError,\n  numericValidator,\n  parseNumber,\n} from 'src/app/utils/validators';\nimport { checkClass } from 'src/helpers/helpers';\n\n/**\n * Payment amount form: Let the user enter and validate an amount to pay.\n */\n@Component({\n  selector: 'app-pay-amount-form',\n  templateUrl: './pay-amount-form.component.html',\n  styleUrls: ['./pay-amount-form.component.scss'],\n})\nexport class PayAmountFormComponent implements OnInit, OnChanges {\n  /** Emit the amount submitted by the user. */\n  @Output() amountSubmitted = new EventEmitter<number>();\n\n  /** (Optional) Minimum amount to allow. */\n  @Input() minAmount?: number = 0;\n\n  /** (Optional) Maximum amount to allow. */\n  @Input() maxAmount?: number;\n\n  /** (Optional) Hook to disable autofocus. */\n  @Input() autofocus = true;\n\n  /** (Optional) Hook to set an initial amount value, if defined. */\n  @Input() setInitialAmountValue?: string;\n\n  #paymentForm?: FormGroup;\n\n  constructor() {}\n\n  /** Safe accessor. */\n  get paymentForm() {\n    return defined(\n      this.#paymentForm,\n      'PayAmountFormComponent.paymentForm accessed before ngOnInit'\n    );\n  }\n\n  /** Convenience accessor. */\n  get amountControl(): FormControl {\n    return checkClass(this.paymentForm.controls.amount, FormControl);\n  }\n\n  /** Convenience accessor for validation errors, if they should be displayed. */\n  get amountErrors(): AmountValidationErrors | null {\n    return this.amountControl.dirty && this.amountControl.invalid\n      ? (this.amountControl.errors as AmountValidationErrors)\n      : null;\n  }\n\n  ngOnInit(): void {\n    this.#paymentForm = this.initPaymentForm();\n    this.setInitialValues();\n  }\n\n  /** Recalculate form validity on input min/max amount change. */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.#paymentForm && (changes?.minAmount || changes?.maxAmount)) {\n      this.amountControl.updateValueAndValidity();\n    }\n  }\n\n  /** Check and emit submission. */\n  async onSubmit(): Promise<void> {\n    this.paymentForm.markAllAsTouched();\n    if (this.paymentForm.valid) {\n      const { amount }: PaymentFormValue = this.paymentForm.value;\n      this.amountSubmitted.emit(defined(parseNumber(amount)));\n    }\n  }\n\n  private initPaymentForm(): FormGroup {\n    return new FormGroup({\n      amount: new FormControl('', [\n        Validators.required,\n        numericValidator,\n        // XXX: Delay evaluation of this.minAmount and this.maxAmount,\n        //      to respond to value changes\n        (control) =>\n          this.minAmount !== undefined\n            ? Validators.min(this.minAmount)(control)\n            : null,\n        (control) =>\n          this.maxAmount !== undefined\n            ? Validators.max(this.maxAmount)(control)\n            : null,\n      ]),\n    });\n  }\n\n  private setInitialValues(): void {\n    if (this.setInitialAmountValue !== undefined) {\n      this.amountControl.setValue(this.setInitialAmountValue);\n      this.amountControl.markAsDirty();\n    }\n  }\n}\n\n/** Type of {@link PayAmountFormComponent.paymentForm}'s values. */\ntype PaymentFormValue = {\n  amount: AmountControlValue;\n};\n\ntype AmountControlValue = string;\n\ntype AmountValidationErrors = Partial<\n  RequiredValidationError &\n    NumericValidationError &\n    MinValidationError &\n    MaxValidationError\n>;\n","<form [formGroup]=\"paymentForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"ion-text-center\">\n    <ion-input\n      formControlName=\"amount\"\n      name=\"amount\"\n      type=\"text\"\n      inputmode=\"decimal\"\n      placeholder=\"Amount\"\n      [autofocus]=\"autofocus\"\n      [ngClass]=\"{ invalid: amountErrors }\"\n      class=\"text-2xl font-audiowide\"\n    ></ion-input>\n\n    <ion-text color=\"danger\" *ngIf=\"amountErrors\">\n      <div *ngIf=\"amountErrors.required\">Required</div>\n      <!-- Skip the additional numeric message if it's just empty. -->\n      <div *ngIf=\"amountErrors.numeric && !amountErrors.required\">\n        Please enter a number\n      </div>\n      <div *ngIf=\"amountErrors.min\">\n        Amount too low (minimum {{ amountErrors.min.min }})\n      </div>\n      <div *ngIf=\"amountErrors.max\">\n        Amount too high (maximum {{ amountErrors.max.max }})\n      </div>\n    </ion-text>\n  </div>\n\n  <div class=\"ion-margin-vertical\">\n    <ion-button\n      expand=\"block\"\n      shape=\"round\"\n      type=\"submit\"\n      [disabled]=\"!paymentForm.valid\"\n      >PAY\n    </ion-button>\n  </div>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { PayAmountFormComponent } from './pay-amount-form.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, IonicModule],\n  declarations: [PayAmountFormComponent],\n  exports: [PayAmountFormComponent],\n})\nexport class PayAmountFormComponentModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { AssetAmount } from 'src/app/utils/assets/assets.common';\n\n@Component({\n  selector: 'app-pay-from-to',\n  templateUrl: './pay-from-to.component.html',\n  styleUrls: ['./pay-from-to.component.scss'],\n})\nexport class PayFromToComponent implements OnInit {\n  // XXX(Pi): Add null to type for async pipe. See: <https://github.com/angular/angular/issues/43727>\n\n  @Input() name?: string | null;\n  @Input() balance?: AssetAmount | null;\n  @Input() receiverAddress?: string | null;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<ion-card>\n  <ion-list lines=\"full\" class=\"!p-0\">\n    <ion-item color=\"white\">\n      <ion-icon name=\"wallet\" color=\"primary\" slot=\"start\"></ion-icon>\n\n      <div\n        class=\"ion-margin-vertical w-full flex justify-between items-center flex-wrap gap-4\"\n      >\n        <div>\n          <ion-label class=\"ion-margin-end\">\n            <h2 class=\"!font-black\">From:</h2>\n            <p>{{ name }}</p>\n            <small>Available Balance</small>\n          </ion-label>\n        </div>\n\n        <div>\n          <ion-text\n            color=\"primary\"\n            class=\"text-3xl font-audiowide overflow-wrap-anywhere\"\n          >\n            {{ balance | assetAmount }}\n          </ion-text>\n\n          <ion-text class=\"text-xl font-bold\">\n            {{ balance | assetSymbol }}\n          </ion-text>\n        </div>\n      </div>\n    </ion-item>\n\n    <ion-item color=\"white\">\n      <ion-icon name=\"qr-code\" color=\"primary\" slot=\"start\"></ion-icon>\n\n      <div\n        class=\"ion-margin-vertical w-full flex justify-between items-center flex-wrap gap-4\"\n      >\n        <div>\n          <ion-label>\n            <h2 class=\"!font-black\">To:</h2>\n          </ion-label>\n        </div>\n\n        <div class=\"font-mono overflow-wrap-anywhere\">\n          {{ receiverAddress }}\n        </div>\n      </div>\n    </ion-item>\n  </ion-list>\n</ion-card>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { PayFromToComponent } from 'src/app/components/pay-from-to/pay-from-to.component';\nimport { AssetPipesModule } from 'src/app/pipes/asset-pipes.module';\n\n@NgModule({\n  imports: [CommonModule, IonicModule, AssetPipesModule],\n  declarations: [PayFromToComponent],\n  exports: [PayFromToComponent],\n})\nexport class PayFromToModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AssetAmount } from 'src/app/utils/assets/assets.common';\nimport { defined } from 'src/app/utils/errors/panic';\n\n/**\n * Let user define a payment, from one or more payment options.\n *\n * This handles account selection, and uses {@link PayAmountConfirmComponent}\n * for amount selection\n */\n@Component({\n  selector: 'app-pay',\n  templateUrl: './pay.component.html',\n  styleUrls: ['./pay.component.scss'],\n})\nexport class PayComponent implements OnInit {\n  /** The available payment options. */\n  @Input() paymentOptions?: ReadonlyArray<PaymentOption>;\n\n  /** Emit the payment submitted by the user. */\n  @Output() paymentSubmitted = new EventEmitter<Payment>();\n\n  /** @see PayAmountFormComponent.autofocus */\n  @Input() autofocus = true;\n\n  selectedOption?: PaymentOption;\n\n  constructor() {}\n\n  /** \"Change account\" button should show for multiple options. */\n  get shouldShowChangeButton(): boolean {\n    return this.paymentOptions !== undefined && 1 < this.paymentOptions.length;\n  }\n\n  ngOnInit(): void {\n    this.initSelectedOption();\n  }\n\n  /** Emit user-confirmed amount as payment. */\n  onAmountConfirmed(amount: AssetAmount): void {\n    const option = defined(\n      this.selectedOption,\n      'PayComponent.onAmountConfirmed: unexpected undefined: selectedOption'\n    );\n    this.paymentSubmitted.emit({ amount, option });\n  }\n\n  private initSelectedOption(): void {\n    if (this.paymentOptions !== undefined && 0 < this.paymentOptions.length) {\n      this.selectedOption = this.paymentOptions[0];\n    }\n  }\n}\n\n/**\n * A payment option, defined as a pair of sending and receiving account.\n */\nexport type PaymentOption = {\n  /** The sending account's name. */\n  senderName: string;\n\n  /** The sending account's balance. */\n  senderBalance: AssetAmount;\n\n  /** The receiving account's address. */\n  receiverAddress: string;\n\n  /** (Optional) A transaction amount limit for this option. */\n  transactionLimit?: number;\n};\n\n/** A payment chosen by the user. */\nexport type Payment = {\n  amount: AssetAmount;\n  option: PaymentOption;\n};\n","<ng-container *ngIf=\"shouldShowChangeButton\">\n  <div class=\"ion-text-center\">\n    <ion-button id=\"trigger-change-account\" color=\"secondary\" shape=\"round\">\n      Change account\n    </ion-button>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"selectedOption\">\n  <app-pay-amount-confirm\n    [name]=\"selectedOption.senderName\"\n    [balance]=\"selectedOption.senderBalance\"\n    [receiverAddress]=\"selectedOption.receiverAddress\"\n    [transactionLimit]=\"selectedOption.transactionLimit\"\n    (amountConfirmed)=\"onAmountConfirmed($event)\"\n    [autofocus]=\"autofocus\"\n  ></app-pay-amount-confirm>\n</ng-container>\n\n<ion-popover\n  trigger=\"trigger-change-account\"\n  dismiss-on-select=\"true\"\n  alignment=\"center\"\n>\n  <ng-template>\n    <ion-list lines=\"full\">\n      <ng-container *ngFor=\"let option of paymentOptions\">\n        <ion-item button (click)=\"selectedOption = option\" class=\"\">\n          <div class=\"w-full text-right\">\n            <ion-text\n              color=\"primary\"\n              class=\"text-3xl font-audiowide overflow-wrap-anywhere\"\n            >\n              {{ option.senderBalance | assetAmount }}\n            </ion-text>\n\n            <ion-text\n              class=\"inline-block text-left text-xl font-bold\"\n              style=\"width: 6ch\"\n            >\n              {{ option.senderBalance | assetSymbol }}\n            </ion-text>\n          </div>\n        </ion-item>\n      </ng-container>\n    </ion-list>\n  </ng-template>\n</ion-popover>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { PayAmountConfirmComponentModule } from 'src/app/components/pay-amount-confirm/pay-amount-confirm.module';\nimport { AssetPipesModule } from 'src/app/pipes/asset-pipes.module';\nimport { PayComponent } from './pay.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    PayAmountConfirmComponentModule,\n    AssetPipesModule,\n  ],\n  declarations: [PayComponent],\n  exports: [PayComponent],\n})\nexport class PayComponentModule {}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport algosdk from 'algosdk';\nimport { Payment, PaymentOption } from 'src/app/components/pay/pay.component';\nimport { AssetAmount } from 'src/app/utils/assets/assets.common';\nimport { getAssetConfigForLedgerInfo } from 'src/app/utils/assets/assets.config';\nimport { environment } from 'src/environments/environment';\nimport { ifDefined } from 'src/helpers/helpers';\nimport * as xrpl from 'xrpl';\n\n/**\n * @see PayPage\n */\n@Component({\n  selector: 'app-pure-pay-page',\n  templateUrl: './pure-pay-page.component.html',\n  styleUrls: ['./pure-pay-page.component.scss'],\n})\nexport class PurePayPageComponent implements OnInit, OnChanges {\n  @Input() senderName?: string | null;\n\n  @Input() receiverAddress?: string | null;\n\n  @Input() algorandBalances?: AssetAmount[] | null;\n\n  @Input() xrplBalances?: AssetAmount[] | null;\n\n  /** XXX: Name prefixed with \"flag\" because the property name can't start with \"on\", for security reasons. */\n  @Input() flagOnfidoCheckIsClear?: boolean | null;\n\n  @Output() paymentSubmitted = new EventEmitter<Payment>();\n\n  /** @see PayAmountFormComponent.autofocus */\n  @Input() autofocus = true;\n\n  paymentOptions?: PaymentOption[];\n\n  assetConfigs = environment.assetConfigs;\n\n  constructor() {}\n\n  get receiverAddressType(): AddressType | undefined {\n    return this.receiverAddress ? addressType(this.receiverAddress) : undefined;\n  }\n\n  get hasAlgorandBalances(): boolean {\n    return 0 < (this.algorandBalances ?? []).length;\n  }\n\n  get hasPaymentOptions(): boolean {\n    return 0 < (this.paymentOptions ?? []).length;\n  }\n\n  ngOnInit() {}\n\n  /**\n   * Recalculate {@link paymentOptions} on change.\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    this.paymentOptions = this.getPaymentOptions();\n  }\n\n  private getPaymentOptions(): PaymentOption[] | undefined {\n    const senderName = this.senderName;\n    const receiverAddress = this.receiverAddress;\n    if (senderName && receiverAddress) {\n      if (this.receiverAddressType === 'Algorand' && this.algorandBalances) {\n        return this.algorandBalances.map((senderBalance) => ({\n          senderName,\n          senderBalance,\n          receiverAddress,\n          ...this.transactionLimitFor(senderBalance),\n        }));\n      } else if (this.receiverAddressType === 'XRPL' && this.xrplBalances) {\n        return this.xrplBalances.map((senderBalance) => ({\n          senderName,\n          senderBalance,\n          receiverAddress,\n          ...this.transactionLimitFor(senderBalance),\n        }));\n      }\n    }\n  }\n\n  /**\n   * Determine the transaction limit to use for the given sender balance.\n   *\n   * This applies `transactionLimitWithoutOnfidoCheck` configurations based on {@link flagOnfidoCheckIsClear}.\n   */\n  private transactionLimitFor(\n    senderBalance: AssetAmount\n  ): Pick<PaymentOption, 'transactionLimit'> {\n    const transactionLimit = this.flagOnfidoCheckIsClear\n      ? undefined\n      : ifDefined(\n          this.assetConfigs,\n          (assetConfigs) =>\n            getAssetConfigForLedgerInfo(assetConfigs, senderBalance.ledgerInfo)\n              ?.transactionLimitWithoutOnfidoCheck\n        );\n    return transactionLimit === undefined ? {} : { transactionLimit };\n  }\n}\n\ntype AddressType = 'Algorand' | 'XRPL';\n\nconst addressTypes = (address: string): AddressType[] => {\n  const coerce = (t: AddressType[]) => t;\n  return [\n    ...coerce(algosdk.isValidAddress(address) ? ['Algorand'] : []),\n    ...coerce(xrpl.isValidAddress(address) ? ['XRPL'] : []),\n  ];\n};\n\nconst addressType = (address: string): AddressType | undefined => {\n  const types = addressTypes(address);\n  switch (types.length) {\n    case 0:\n      return undefined;\n    case 1:\n      return types[0];\n    default:\n      throw Error(\n        `addressType: ${JSON.stringify(\n          types\n        )} has multiple types: ${JSON.stringify(types)}`\n      );\n  }\n};\n","<div class=\"ion-text-center p-2\">\n  <h1 class=\"font-semibold font-nasalization\">Pay</h1>\n</div>\n\n<ng-container *ngIf=\"hasPaymentOptions; else noPaymentOptions\">\n  <app-pay\n    [paymentOptions]=\"paymentOptions\"\n    (paymentSubmitted)=\"paymentSubmitted.emit($event)\"\n    [autofocus]=\"autofocus\"\n  ></app-pay>\n</ng-container>\n\n<ng-template #noPaymentOptions>\n  <div class=\"ion-text-center p-2\">\n    <ng-container *ngIf=\"!receiverAddressType\">\n      <h2 class=\"font-semibold font-nasalization\">Unsupported address</h2>\n      <p>Address not recognised:</p>\n      <pre class=\"whitespace-pre-wrap overflow-wrap-anywhere\">{{\n        receiverAddress | json\n      }}</pre>\n    </ng-container>\n\n    <ng-container\n      *ngIf=\"receiverAddressType === 'Algorand' && !hasAlgorandBalances\"\n    >\n      <h2 class=\"font-semibold font-nasalization\">No Algorand account</h2>\n      <p>You do not have an Algorand account</p>\n    </ng-container>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { PayComponentModule } from 'src/app/components/pay/pay.module';\nimport { PurePayPageComponent } from './pure-pay-page.component';\n\n@NgModule({\n  imports: [CommonModule, IonicModule, PayComponentModule],\n  declarations: [PurePayPageComponent],\n  exports: [PurePayPageComponent],\n})\nexport class PurePayPageComponentModule {}\n","import {\n  ASSET_SYMBOL_ALGO,\n  isLedgerInfoAlgo,\n  LEDGER_TYPE_ALGORAND,\n} from './assets.algo';\nimport { isLedgerInfoAsa, LedgerInfoAsa } from './assets.algo.asa';\nimport { LedgerInfo } from './assets.common';\nimport {\n  ASSET_SYMBOL_XRP,\n  isLedgerInfoXrp,\n  LEDGER_TYPE_XRPL,\n} from './assets.xrp';\nimport { isLedgerInfoXrplToken, LedgerInfoXrplToken } from './assets.xrp.token';\n\n/**\n * A collection of {@link AssetConfig}, per ledger / asset.\n *\n * @see Environment.assetConfigs\n */\nexport type AssetConfigs = {\n  [LEDGER_TYPE_ALGORAND]?: {\n    [ASSET_SYMBOL_ALGO]?: AssetConfig;\n\n    ASA?: {\n      [assetId: LedgerInfoAsa['assetId']]: AssetConfig;\n    };\n  };\n\n  [LEDGER_TYPE_XRPL]?: {\n    [ASSET_SYMBOL_XRP]?: AssetConfig;\n\n    XrplToken?: {\n      [currency: LedgerInfoXrplToken['currency']]: AssetConfig;\n    };\n  };\n};\n\n/**\n * Configuration for a particular asset.\n */\nexport type AssetConfig = {\n  /** Transaction soft-limit on accounts without clear Onfido checks. */\n  transactionLimitWithoutOnfidoCheck?: number;\n};\n\n/**\n * Look up the asset config for the given asset's ledger info, if any.\n */\nexport const getAssetConfigForLedgerInfo = (\n  assetConfigs: AssetConfigs,\n  ledgerInfo: LedgerInfo\n): AssetConfig | undefined => {\n  if (ledgerInfo.type === LEDGER_TYPE_ALGORAND) {\n    if (isLedgerInfoAlgo(ledgerInfo)) {\n      return assetConfigs?.[LEDGER_TYPE_ALGORAND]?.[ASSET_SYMBOL_ALGO];\n    } else if (isLedgerInfoAsa(ledgerInfo)) {\n      return assetConfigs?.[LEDGER_TYPE_ALGORAND]?.ASA?.[ledgerInfo.assetId];\n    }\n  } else if (ledgerInfo.type === LEDGER_TYPE_XRPL) {\n    if (isLedgerInfoXrp(ledgerInfo)) {\n      return assetConfigs?.[LEDGER_TYPE_XRPL]?.[ASSET_SYMBOL_XRP];\n    }\n    if (isLedgerInfoXrplToken(ledgerInfo)) {\n      return assetConfigs?.[LEDGER_TYPE_XRPL]?.XrplToken?.[ledgerInfo.currency];\n    }\n  }\n};\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PayPage } from './pay.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PayPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PayPageRoutingModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { PayFromToModule } from 'src/app/components/pay-from-to/pay-from-to.module';\nimport { PurePayPageComponentModule } from 'src/app/components/pure-pay-page/pure-pay-page.module';\nimport { SharedModule } from 'src/app/modules/shared/shared.module';\nimport { PayPageRoutingModule } from './pay-routing.module';\nimport { PayPage } from './pay.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    PayPageRoutingModule,\n    SharedModule,\n    PurePayPageComponentModule,\n    PayFromToModule,\n  ],\n  declarations: [PayPage],\n  exports: [PayPage],\n})\nexport class PayPageModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { filterNilValue } from '@datorama/akita';\nimport { LoadingController, NavController } from '@ionic/angular';\nimport { Observable, pluck } from 'rxjs';\nimport { Payment } from 'src/app/components/pay/pay.component';\nimport { TransactionConfirmation } from 'src/app/services/algosdk.utils';\nimport { checkTxResponseSucceeded } from 'src/app/services/xrpl.utils';\nimport { SessionAlgorandService } from 'src/app/state/session-algorand.service';\nimport { SessionXrplService } from 'src/app/state/session-xrpl.service';\nimport { SessionQuery } from 'src/app/state/session.query';\nimport { isAssetAmountAlgo } from 'src/app/utils/assets/assets.algo';\nimport {\n  convertFromAssetAmountAsaToLedger,\n  isAssetAmountAsa,\n} from 'src/app/utils/assets/assets.algo.asa';\nimport {\n  AssetAmount,\n  formatAssetAmount,\n  formatAssetSymbol,\n} from 'src/app/utils/assets/assets.common';\nimport {\n  convertFromAssetAmountXrpToLedger,\n  isAssetAmountXrp,\n} from 'src/app/utils/assets/assets.xrp';\nimport {\n  convertFromAssetAmountXrplTokenToLedger,\n  isAssetAmountXrplToken,\n} from 'src/app/utils/assets/assets.xrp.token';\nimport { panic } from 'src/app/utils/errors/panic';\nimport { withLoadingOverlayOpts } from 'src/app/utils/loading.helpers';\nimport { SwalHelper } from 'src/app/utils/notification/swal-helper';\nimport { environment } from 'src/environments/environment';\nimport { never } from 'src/helpers/helpers';\nimport * as xrpl from 'xrpl';\nimport { TxResponse } from 'xrpl';\n\n@Component({\n  selector: 'app-pay-page',\n  templateUrl: './pay.page.html',\n  styleUrls: ['./pay.page.scss'],\n})\nexport class PayPage implements OnInit {\n  /** @see PayAmountFormComponent.autofocus */\n  @Input() autofocus = true;\n\n  senderName: Observable<string> = this.sessionQuery.wallet.pipe(\n    filterNilValue(),\n    pluck('owner_name')\n  );\n\n  receiverAddress: Observable<string> = this.route.queryParams.pipe(\n    pluck('receiverAddress')\n  );\n\n  algorandBalances: Observable<AssetAmount[]> =\n    this.sessionQuery.algorandBalances;\n\n  xrplBalances: Observable<AssetAmount[] | undefined> =\n    this.sessionQuery.xrplBalances;\n\n  onfidoCheckIsClear: Observable<boolean> =\n    this.sessionQuery.onfidoCheckIsClear;\n\n  constructor(\n    private route: ActivatedRoute,\n    private navCtrl: NavController,\n    private sessionAlgorandService: SessionAlgorandService,\n    private sessionXrplService: SessionXrplService,\n    public sessionQuery: SessionQuery,\n    private loadingCtrl: LoadingController,\n    private notification: SwalHelper\n  ) {}\n\n  ngOnInit() {}\n\n  async onPaymentSubmitted({\n    amount,\n    option: { receiverAddress },\n  }: Payment): Promise<void> {\n    const result = await withLoadingOverlayOpts(\n      this.loadingCtrl,\n      { message: 'Confirming Transaction' },\n      () => this.sendByLedgerType(amount, receiverAddress)\n    );\n    await this.notifyResult(result, amount, receiverAddress);\n  }\n\n  /**\n   * Send an amount to `receiverAddress` using the amount's ledger type and asset info.\n   *\n   * This currently handles:\n   *\n   * - Algorand: Algo & ASA\n   * - XRPL: XRP & tokens\n   *\n   * @todo Move this into an appropriate aggregated payment service somewhere?\n   */\n  protected async sendByLedgerType(\n    amount: AssetAmount,\n    receiverAddress: string\n  ): Promise<\n    { algorandResult: TransactionConfirmation } | { xrplResult: TxResponse }\n  > {\n    if (isAssetAmountAlgo(amount)) {\n      return {\n        algorandResult: await this.sessionAlgorandService.sendAlgos(\n          receiverAddress,\n          amount.amount\n        ),\n      };\n    } else if (isAssetAmountAsa(amount)) {\n      const { amount: amountInLedgerUnits, assetId } =\n        convertFromAssetAmountAsaToLedger(amount);\n      return {\n        algorandResult: await this.sessionAlgorandService.sendAssetFunds(\n          assetId,\n          receiverAddress,\n          amountInLedgerUnits\n        ),\n      };\n    } else if (isAssetAmountXrp(amount)) {\n      return {\n        xrplResult: await this.sessionXrplService.sendFunds(\n          receiverAddress,\n          convertFromAssetAmountXrpToLedger(amount)\n        ),\n      };\n    } else if (isAssetAmountXrplToken(amount)) {\n      return {\n        xrplResult: await this.sessionXrplService.sendFunds(\n          receiverAddress,\n          convertFromAssetAmountXrplTokenToLedger(amount)\n        ),\n      };\n    } else {\n      throw panic('PayPage.sendAmount: unexpected amount', { amount });\n    }\n  }\n\n  protected async notifyResult(\n    result:\n      | { algorandResult: TransactionConfirmation }\n      | { xrplResult: TxResponse },\n    amount: AssetAmount,\n    receiverAddress: string\n  ): Promise<void> {\n    if ('algorandResult' in result) {\n      const { algorandResult: confirmation } = result;\n      this.notifySuccess({\n        amount: `${formatAssetAmount(amount)} ${formatAssetSymbol(amount)}`,\n        address: receiverAddress,\n        txId: confirmation.txId,\n        timestamp: new Date(),\n        txUrlPrefix: environment.algorandTransactionUrlPrefix,\n      });\n    } else if ('xrplResult' in result) {\n      const { xrplResult: txResponse } = result;\n\n      const { succeeded, resultCode } = checkTxResponseSucceeded(txResponse);\n\n      if (succeeded) {\n        this.notifySuccess({\n          amount: `${formatAssetAmount(amount)} ${formatAssetSymbol(amount)}`,\n          address: receiverAddress,\n          txId: txResponse.id.toString(),\n          timestamp: new Date(),\n        });\n      } else {\n        await this.notifyXrplFailure({ resultCode });\n      }\n    } else {\n      throw never(result);\n    }\n  }\n\n  protected notifySuccess({\n    amount,\n    address,\n    txId,\n    timestamp,\n    txUrlPrefix,\n  }: {\n    amount: string;\n    address: string;\n    txId: string;\n    timestamp: Date;\n    txUrlPrefix?: string;\n  }): void {\n    const txIdHtml = txUrlPrefix\n      ? `<a href=\"${txUrlPrefix}${txId}\" target=\"_blank\" >${txId}</a>`\n      : `${txId}`;\n    this.notification.swal\n      .fire({\n        icon: 'success',\n        titleText: 'Money sent!',\n        text: 'Your money was sent successfully.',\n        html: `<div >\n              <h2 class=\"text-primary font-bold\">${amount}</h2>\n              <p class=\"text-xs\"><b>Receiver:</b> ${address}</p>\n              <p class=\"text-xs\"><b>Transaction ID:</b> ${txIdHtml}</p>\n              <p class=\"text-xs\">Completed on ${timestamp.toLocaleString()}</p>\n            </div>`,\n        confirmButtonText: 'DONE',\n      })\n      .then(({ isConfirmed }) => {\n        if (isConfirmed) {\n          this.navCtrl.navigateRoot('wallet');\n        }\n      });\n  }\n\n  protected async notifyXrplFailure({\n    resultCode,\n  }: {\n    resultCode: xrpl.TransactionMetadata['TransactionResult'];\n  }): Promise<void> {\n    const categoryLocalError = resultCode.startsWith('tel');\n    const categoryRetry = resultCode.startsWith('ter');\n    const retryable = categoryLocalError || categoryRetry;\n\n    await this.notification.swal.fire({\n      icon: retryable ? 'warning' : 'error',\n      titleText: 'Transaction failed',\n      html: [\n        ...(categoryLocalError ? ['<p>(Local error)</p>'] : []),\n        ...(categoryRetry ? ['<p>(Retry possible)</p>'] : []),\n        `<p>Result code: ${resultCode}</p>`,\n        '<p>See <a href=\"https://xrpl.org/transaction-results.html\" target=\"_blank\">Transaction Results</a> for more details.</p>',\n      ].join('\\n'),\n    });\n  }\n}\n","<ion-header class=\"ion-no-border\">\n  <app-header></app-header>\n</ion-header>\n\n<ion-content>\n  <ion-grid fixed>\n    <app-pure-pay-page\n      [senderName]=\"senderName | async\"\n      [receiverAddress]=\"receiverAddress | async\"\n      [algorandBalances]=\"algorandBalances | async\"\n      [xrplBalances]=\"xrplBalances | async\"\n      [flagOnfidoCheckIsClear]=\"onfidoCheckIsClear | async\"\n      (paymentSubmitted)=\"onPaymentSubmitted($event)\"\n      [autofocus]=\"autofocus\"\n    ></app-pure-pay-page>\n  </ion-grid>\n</ion-content>\n"],"names":["EventEmitter","FormControl","FormGroup","Validators","defined","numericValidator","parseNumber","checkClass","i0","PayAmountFormComponent","constructor","_PayAmountFormComponent_paymentForm","paymentForm","__classPrivateFieldGet","amountControl","controls","amount","amountErrors","dirty","invalid","errors","ngOnInit","__classPrivateFieldSet","initPaymentForm","setInitialValues","ngOnChanges","changes","minAmount","maxAmount","updateValueAndValidity","onSubmit","markAllAsTouched","valid","value","amountSubmitted","emit","required","control","undefined","min","max","setInitialAmountValue","setValue","markAsDirty","selectors","inputs","autofocus","outputs","features","decls","vars","consts","template","ctx","filterNilValue","pluck","checkTxResponseSucceeded","isAssetAmountAlgo","convertFromAssetAmountAsaToLedger","isAssetAmountAsa","formatAssetAmount","formatAssetSymbol","convertFromAssetAmountXrpToLedger","isAssetAmountXrp","convertFromAssetAmountXrplTokenToLedger","isAssetAmountXrplToken","panic","withLoadingOverlayOpts","environment","never","PayPage","route","navCtrl","sessionAlgorandService","sessionXrplService","sessionQuery","loadingCtrl","notification","wallet","pipe","queryParams","algorandBalances","xrplBalances","onfidoCheckIsClear","onPaymentSubmitted","option","receiverAddress","result","message","sendByLedgerType","notifyResult","algorandResult","sendAlgos","amountInLedgerUnits","assetId","sendAssetFunds","xrplResult","sendFunds","confirmation","notifySuccess","address","txId","timestamp","Date","txUrlPrefix","algorandTransactionUrlPrefix","txResponse","succeeded","resultCode","id","toString","notifyXrplFailure","txIdHtml","swal","fire","icon","titleText","text","html","toLocaleString","confirmButtonText","then","isConfirmed","navigateRoot","categoryLocalError","startsWith","categoryRetry","retryable","join"],"sourceRoot":"webpack:///"}