{"version":3,"file":"src_app_views_wallet-access_wallet-access_module_ts.js","mappings":"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","sources":["./src/app/components/pin-entry/pin-entry.component.ts","./src/app/components/pin-entry/pin-entry.component.html","./src/app/components/pin-entry/pin-entry.module.ts","./src/app/utils/loading.helpers.ts","./src/app/views/wallet-access/wallet-access-routing.module.ts","./src/app/views/wallet-access/wallet-access.module.ts","./src/app/views/wallet-access/wallet-access.page.ts","./src/app/views/wallet-access/wallet-access.page.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { defined } from 'src/app/utils/errors/panic';\nimport {\n  MaxLengthValidationError,\n  MinLengthValidationError,\n  PatternValidationError,\n  RequiredValidationError,\n} from 'src/app/utils/validation.errors';\nimport { checkClass } from 'src/helpers/helpers';\n\n@Component({\n  selector: 'app-pin-entry',\n  templateUrl: './pin-entry.component.html',\n  styleUrls: ['./pin-entry.component.scss'],\n})\nexport class PinEntryComponent implements OnInit {\n  /** Emit the PIN confirmed by the user. */\n  @Output() pinConfirmed = new EventEmitter<PinValue>();\n\n  /** Minimum PIN length. */\n  @Input() minLength = 4;\n\n  /** Maximum PIN length. */\n  @Input() maxLength = 10;\n\n  /** Optional hook to disable autofocus. */\n  @Input() autofocus = true;\n\n  /** Optional hook: set an initial PIN value, if defined. */\n  @Input() setInitialPinValue?: string;\n\n  #pinForm?: FormGroup;\n\n  constructor() {}\n\n  /** Safe accessor. */\n  get pinForm(): FormGroup {\n    return defined(\n      this.#pinForm,\n      'PinEntryComponent.pinForm accessed before ngOnInit'\n    );\n  }\n\n  /** Safe accessor. */\n  get pinControl(): FormControl {\n    return checkClass(this.pinForm.controls.pin, FormControl);\n  }\n\n  /** Safe accessor. */\n  get pinErrors(): PinValidationErrors | null {\n    return this.pinControl.dirty && this.pinControl.invalid\n      ? (this.pinControl.errors as PinValidationErrors)\n      : null;\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  onSubmit(): void {\n    const pinForm = defined(this.pinForm);\n    pinForm.markAllAsTouched();\n    console.log('PinEntryComponent.onSubmit: ', { valid: pinForm.valid });\n    if (pinForm.valid) {\n      const { pin }: PinFormValue = pinForm.value;\n      this.pinConfirmed.emit(pin);\n    }\n  }\n\n  private initForm(): void {\n    this.#pinForm = this.createPinForm();\n    if (this.setInitialPinValue !== undefined) {\n      this.pinControl.setValue(this.setInitialPinValue);\n      this.pinControl.markAsDirty();\n    }\n  }\n\n  private createPinForm(): FormGroup {\n    return new FormGroup({\n      pin: new FormControl('', {\n        validators: [\n          Validators.required,\n          Validators.minLength(this.minLength),\n          Validators.maxLength(this.maxLength),\n          Validators.pattern(/^\\d*$/),\n        ],\n      }),\n    });\n  }\n}\n\ntype PinFormValue = {\n  pin: PinValue;\n};\n\ntype PinValue = string;\n\ntype PinValidationErrors = Partial<\n  RequiredValidationError &\n    PatternValidationError &\n    MinLengthValidationError &\n    MaxLengthValidationError\n>;\n","<div class=\"text-center\">\n  <div class=\"inline-block w-auto m-auto\">\n    <ion-icon name=\"lock-closed-outline\" class=\"!text-5xl\"></ion-icon>\n\n    <h1 class=\"font-semibold font-nasalization\">Enter Pin</h1>\n\n    <form [formGroup]=\"pinForm\" (ngSubmit)=\"onSubmit()\">\n      <div>\n        <ion-input\n          type=\"password\"\n          formControlName=\"pin\"\n          inputmode=\"numeric\"\n          [autofocus]=\"autofocus\"\n          [minlength]=\"minLength\"\n          [maxlength]=\"maxLength\"\n          [ngClass]=\"{ invalid: pinErrors }\"\n        ></ion-input>\n\n        <ion-text color=\"danger\" *ngIf=\"pinErrors\">\n          <div *ngIf=\"pinErrors.required\">Required</div>\n          <div *ngIf=\"pinErrors.pattern\">Please enter digits only (0-9)</div>\n          <div *ngIf=\"pinErrors.minlength\">\n            Too short (minimum {{ pinErrors.minlength.requiredLength }})\n          </div>\n          <div *ngIf=\"pinErrors.maxlength\">\n            Too long (maximum {{ pinErrors.maxlength.requiredLength }})\n          </div>\n        </ion-text>\n      </div>\n\n      <ion-button\n        expand=\"block\"\n        shape=\"round\"\n        type=\"submit\"\n        [disabled]=\"!pinForm.valid\"\n        >Confirm</ion-button\n      >\n    </form>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { PinEntryComponent } from './pin-entry.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, IonicModule],\n  declarations: [PinEntryComponent],\n  exports: [PinEntryComponent],\n})\nexport class PinEntryComponentModule {}\n","import { LoadingController } from '@ionic/angular';\nimport { LoadingOptions } from '@ionic/core';\n\n// Show the default loading overlay around `f()`.\nexport const withLoadingOverlay = async <T>(\n  loadingController: LoadingController,\n  f: () => Promise<T>\n): Promise<T> => await withLoadingOverlayOpts(loadingController, {}, f);\n\n// Show a loading overlay with `options` around `f()`.\nexport const withLoadingOverlayOpts = async <T>(\n  loadingController: LoadingController,\n  options: LoadingOptions,\n  f: () => Promise<T>\n): Promise<T> => {\n  const loading = await loadingController.create(options);\n  await loading.present();\n  try {\n    return await f();\n  } finally {\n    await loading.dismiss();\n  }\n};\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { WalletAccessPage } from './wallet-access.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: WalletAccessPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class WalletAccessPageRoutingModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { PinEntryComponentModule } from 'src/app/components/pin-entry/pin-entry.module';\nimport { SharedModule } from 'src/app/modules/shared/shared.module';\nimport { WalletAccessPageRoutingModule } from './wallet-access-routing.module';\nimport { WalletAccessPage } from './wallet-access.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    WalletAccessPageRoutingModule,\n    SharedModule,\n    PinEntryComponentModule,\n  ],\n  declarations: [WalletAccessPage],\n})\nexport class WalletAccessPageModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Capacitor } from '@capacitor/core';\nimport { LoadingController, ModalController } from '@ionic/angular';\nimport { SessionService } from 'src/app/state/session.service';\nimport { defined } from 'src/app/utils/errors/panic';\nimport { withLoadingOverlayOpts } from 'src/app/utils/loading.helpers';\nimport { SwalHelper } from 'src/app/utils/notification/swal-helper';\nimport { handleScan } from '../scanner.helpers';\n\n@Component({\n  selector: 'app-wallet-access',\n  templateUrl: './wallet-access.page.html',\n  styleUrls: ['./wallet-access.page.scss'],\n})\nexport class WalletAccessPage implements OnInit {\n  /** @see showPinEntryModal */\n  @Input() isPinEntryOpen = false;\n\n  hasCamera?: boolean;\n\n  /** @see validatedAddress */\n  address?: string;\n\n  constructor(\n    // XXX: Capacitor.isPluginAvailable('Camera') depends on ScannerService, as a side effect.\n    private modalCtrl: ModalController,\n    private sessionService: SessionService,\n    private notification: SwalHelper,\n    private router: Router,\n    private loadingCtrl: LoadingController\n  ) {}\n\n  /** Validated {@link address}, or `undefined`. */\n  get validatedAddress(): string | undefined {\n    const trimmed = this.address?.trim();\n    return trimmed === '' ? undefined : trimmed;\n  }\n\n  ngOnInit(): void {\n    // XXX: Capacitor.isPluginAvailable('Camera') depends on ScannerService, as a side effect.\n    this.hasCamera = Capacitor.isPluginAvailable('Camera');\n  }\n\n  async openScanner(): Promise<void> {\n    await handleScan(\n      this.modalCtrl,\n      this.notification.swal,\n      this.confirmAddress\n    );\n  }\n\n  /** User clicked to confirm address: show PIN entry. */\n  async confirmAddress(): Promise<void> {\n    if (this.validatedAddress !== undefined) {\n      this.showPinEntryModal();\n    } else {\n      await this.notification.swal.fire({\n        icon: 'warning',\n        title: 'Invalid Address',\n        text: 'Please input a valid wallet address',\n      });\n    }\n  }\n\n  /** Show the PIN entry modal. */\n  showPinEntryModal(): void {\n    this.isPinEntryOpen = true;\n  }\n\n  /** User confirmed PIN: attempt to open wallet. */\n  async onPinConfirmed(pin: string): Promise<void> {\n    const address = defined(\n      this.validatedAddress,\n      'WalletAccessPage.onPinConfirmed: unexpected invalid address'\n    );\n    const openWalletErrorMessage = await withLoadingOverlayOpts(\n      this.loadingCtrl,\n      { message: 'Opening wallet…' },\n      async () => await this.sessionService.openWallet(address, pin)\n    );\n    if (openWalletErrorMessage !== undefined) {\n      await this.notification.swal.fire({\n        icon: 'error',\n        title: 'Open Wallet Failed',\n        text: openWalletErrorMessage,\n      });\n    } else {\n      await this.router.navigate(['/wallet']);\n    }\n  }\n}\n","<ion-header class=\"ion-no-border\">\n  <app-header></app-header>\n</ion-header>\n\n<ion-content>\n  <ion-grid fixed class=\"h-full\">\n    <ion-row class=\"h-full content-around px-5\">\n      <ion-col size=\"12\" class=\"text-center\">\n        <ng-container *ngIf=\"hasCamera\">\n          <ion-button expand=\"block\" shape=\"round\" (click)=\"openScanner()\"\n            >Access via QR Code\n          </ion-button>\n          <p>OR</p>\n        </ng-container>\n        <ion-textarea\n          placeholder=\"Enter wallet address\"\n          [(ngModel)]=\"address\"\n        ></ion-textarea>\n        <ion-button\n          [disabled]=\"!validatedAddress\"\n          expand=\"block\"\n          shape=\"round\"\n          class=\"mt-4\"\n          (click)=\"confirmAddress()\"\n          >Confirm</ion-button\n        >\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-content>\n\n<!-- Show PIN entry modal on `isPinEntryOpen`. -->\n<!-- Calls `onPinConfirmed` to continue with wallet opening process. -->\n<ion-modal [isOpen]=\"isPinEntryOpen\" (didDismiss)=\"isPinEntryOpen = false\">\n  <ng-template>\n    <div class=\"ion-page ion-justify-content-center ion-align-items-center\">\n      <app-pin-entry\n        (pinConfirmed)=\"isPinEntryOpen = false; onPinConfirmed($event)\"\n      ></app-pin-entry>\n    </div>\n  </ng-template>\n</ion-modal>\n"],"names":["withLoadingOverlay","loadingController","f","withLoadingOverlayOpts","options","loading","create","present","dismiss","Capacitor","defined","handleScan","i0","ctx_r2","ctx_r4","WalletAccessPage","constructor","modalCtrl","sessionService","notification","router","loadingCtrl","validatedAddress","trimmed","address","_a","trim","undefined","ngOnInit","hasCamera","isPluginAvailable","openScanner","swal","confirmAddress","showPinEntryModal","fire","icon","title","text","isPinEntryOpen","onPinConfirmed","pin","openWalletErrorMessage","message","openWallet","navigate","selectors","inputs","decls","vars","consts","template","ctx"],"sourceRoot":"webpack:///"}