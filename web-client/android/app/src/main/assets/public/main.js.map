{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/modules/error-handler.module.ts","./src/app/open-wallet.guard.ts","./src/app/services/algosdk.utils.ts","./src/app/state/session.query.ts","./src/app/state/session.store.ts","./src/app/transloco/transloco-root.module.ts","./src/app/utils/assets/assets.algo.asa.ts","./src/app/utils/assets/assets.algo.ts","./src/app/utils/assets/assets.xrp.token.ts","./src/app/utils/assets/assets.xrp.ts","./src/app/utils/errors/global-error-handler.ts","./src/app/utils/errors/panic.ts","./src/app/utils/notification/swal-helper.ts","./src/app/utils/validators.ts","./src/environments/environment.ts","./src/helpers/helpers.ts","./src/main.ts","./node_modules/@ionic/core/dist/esm|lazy|/^\\.\\/.*\\.entry\\.js$/|include: /\\.entry\\.js$/|exclude: /\\.system\\.entry\\.js$/|groupOptions: {}|namespace object","./node_modules/@ionic/pwa-elements/dist/esm|lazy|/^\\.\\/.*\\.entry\\.js$/|include: /\\.entry\\.js$/|exclude: /\\.system\\.entry\\.js$/|groupOptions: {}|namespace object","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/asn1.js/node_modules/bn.js/lib|buffer","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/bn.js/lib|buffer","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams|util","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/browserify-sign/node_modules/readable-stream/lib|util","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/create-ecdh/node_modules/bn.js/lib|buffer","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/diffie-hellman/node_modules/bn.js/lib|buffer","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/elliptic/node_modules/bn.js/lib|buffer","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/hash-base/node_modules/readable-stream/lib/internal/streams|util","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/hash-base/node_modules/readable-stream/lib|util","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/miller-rabin/node_modules/bn.js/lib|buffer","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/public-encrypt/node_modules/bn.js/lib|buffer","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/readable-stream/lib/internal/streams|util","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/readable-stream/lib|util","ignored|/Users/jongbonga/Code/Ntls/Wallet/web-client/node_modules/tiny-secp256k1/node_modules/bn.js/lib|buffer"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\nimport { OpenWalletGuard } from './open-wallet.guard';\n\n// XXX(Pi, 2021-07-05): prettier ignore to work around compodoc bug: https://github.com/compodoc/compodoc/issues/954#issuecomment-708987583\n// XXX(Pi, 2021-10-07): Is this workaround still needed?\nexport const routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'landing',\n    pathMatch: 'full',\n  },\n  {\n    path: 'wallet',\n    loadChildren: () =>\n      import('./views/wallet/wallet.module').then(\n        m => m.WalletPageModule // prettier-ignore\n      ),\n    canActivate: [OpenWalletGuard],\n  },\n  {\n    path: 'register',\n    loadChildren: () =>\n      import('./views/register/register.module').then(\n        m => m.RegisterPageModule // prettier-ignore\n      ),\n  },\n  {\n    path: 'home',\n    loadChildren: () =>\n      import('./views/home/home.module').then(\n        m => m.HomePageModule // prettier-ignore\n      ),\n  },\n  {\n    path: 'landing',\n    loadChildren: () =>\n      import('./views/landing/landing.module').then(\n        m => m.LandingPageModule // prettier-ignore\n      ),\n  },\n  {\n    path: 'print-wallet',\n    loadChildren: () =>\n      import('./views/print-wallet/print-wallet.module').then(\n        (m) => m.PrintWalletPageModule // prettier-ignore\n      ),\n  },\n  {\n    path: 'scanner',\n    loadChildren: () =>\n      import('./views/scanner/scanner.module').then(\n        m => m.ScannerPageModule // prettier-ignore\n      ),\n  },\n  {\n    path: 'wallet-access',\n    loadChildren: () =>\n      import('./views/wallet-access/wallet-access.module').then(\n        (m) => m.WalletAccessPageModule //prettier-ignore\n      ),\n  },\n  {\n    path: 'pay',\n    loadChildren: () =>\n      import('./views/pay/pay.module').then((m) => m.PayPageModule),\n    canActivate: [OpenWalletGuard],\n  },\n  {\n    path: 'manual-address',\n    loadChildren: () =>\n      import('./views/manual-address/manual-address.module').then(\n        (m) => m.ManualAddressPageModule\n      ),\n  },\n  {\n    path: 'kyc',\n    loadChildren: () =>\n      import('./views/kyc/kyc.module').then((m) => m.KycPageModule),\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n})\nexport class AppComponent {\n  constructor() {}\n}\n","<ion-app>\n  <ion-router-outlet></ion-router-outlet>\n</ion-app>\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\nimport { AkitaNgRouterStoreModule } from '@datorama/akita-ng-router-store';\nimport { AkitaNgDevtools } from '@datorama/akita-ngdevtools';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { NgxPrinterModule } from 'ngx-printer';\nimport { environment } from '../environments/environment';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ErrorHandlerModule } from './modules/error-handler.module';\nimport { TranslocoRootModule } from './transloco/transloco-root.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    IonicModule.forRoot(),\n    AppRoutingModule,\n    HttpClientModule,\n    TranslocoRootModule,\n    FontAwesomeModule,\n    environment.production ? [] : AkitaNgDevtools.forRoot(),\n    AkitaNgRouterStoreModule,\n    NgxPrinterModule.forRoot({ printOpenWindow: false }),\n    ErrorHandlerModule,\n  ],\n  providers: [{ provide: RouteReuseStrategy, useClass: IonicRouteStrategy }],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { CommonModule } from '@angular/common';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport * as SentryAngular from '@sentry/angular';\nimport * as Sentry from '@sentry/capacitor';\nimport { Dedupe as DedupeIntegration } from '@sentry/integrations';\nimport { BrowserTracing } from '@sentry/tracing';\nimport { GlobalErrorHandler } from '../utils/errors/global-error-handler';\n\nSentry.init(\n  {\n    dsn: 'https://67b1d83771ef47bfb176012e478f8a6f@o1082240.ingest.sentry.io/6090433',\n    integrations: [new DedupeIntegration(), new BrowserTracing()],\n  },\n  SentryAngular.init\n);\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n\n  providers: [\n    {\n      provide: ErrorHandler,\n      useClass: GlobalErrorHandler,\n    },\n  ],\n})\nexport class ErrorHandlerModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { SessionQuery } from 'src/app/state/session.query';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OpenWalletGuard implements CanActivate {\n  constructor(private sessionQuery: SessionQuery, private router: Router) {}\n  canActivate(): true | UrlTree {\n    if (this.sessionQuery.isActiveSession()) {\n      return true;\n    } else {\n      return this.router.parseUrl('/landing');\n    }\n  }\n}\n","/**\n * Supporting code from the algosdk examples / utils.\n */\n\nimport {\n  Algodv2,\n  algosToMicroalgos,\n  EncodedSignedTransaction,\n  microalgosToAlgos,\n} from 'algosdk';\nimport { defined, panic } from 'src/app/utils/errors/panic';\n\nexport type TransactionConfirmation = {\n  txn: EncodedSignedTransaction;\n  confirmedRound: number;\n  txId: string;\n};\n\n/** Subset of algosdk's PendingTransactionResponse, without bigint. */\ntype PendingInfo = {\n  poolError: string;\n  txn: EncodedSignedTransaction;\n  confirmedRound?: number;\n};\n\n/**\n * Wait for a transaction to be confirmed.\n *\n * This is a cleaned-up version of:\n * https://github.com/algorand/js-algorand-sdk/blob/v1.11.1/examples/utils.js#L67\n */\nexport const waitForConfirmation = async (\n  algodClient: Algodv2,\n  txId: string,\n  timeoutRounds: number\n): Promise<TransactionConfirmation> => {\n  const lastRound = await getLastRound(algodClient);\n\n  const startRound = lastRound + 1;\n  const endRound = startRound + timeoutRounds;\n  for (let nextRound = startRound; nextRound < endRound; nextRound++) {\n    // TODO: This throws a 404 error for txId not found: handle / report that better.\n    const pendingInfo = await getPendingInfo(algodClient, txId);\n    const { poolError, txn, confirmedRound } = pendingInfo;\n\n    if (confirmedRound && 0 < confirmedRound) {\n      // Transaction confirmed!\n      return { confirmedRound, txn, txId };\n    } else if (poolError !== '') {\n      // TODO: Report rejections better.\n      throw new Error(\n        `Transaction ${txId} rejected - pool error: ${poolError}`\n      );\n    }\n\n    await algodClient.statusAfterBlock(nextRound).do();\n  }\n\n  // TODO: Handle timeouts better.\n  throw new Error(\n    `Transaction ${txId} not confirmed after ${timeoutRounds} rounds`\n  );\n};\n\n/** Helper: Get the node's last (most current) round. */\nconst getLastRound = async (algodClient: Algodv2): Promise<number> => {\n  // Docs: https://developer.algorand.org/docs/reference/rest-apis/algod/v2/#get-v2status\n  // See also: algosdk NodeStatusResponse\n  const nodeStatus = await algodClient.status().do();\n  return checkNumber(nodeStatus['last-round']);\n};\n\nconst getPendingInfo = async (\n  algodClient: Algodv2,\n  txId: string\n): Promise<PendingInfo> => {\n  // Docs: https://developer.algorand.org/docs/reference/rest-apis/algod/v2/#get-v2transactionspendingtxid\n  // See also: algosdk PendingTransactionResponse\n  const pendingInfo = await algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n\n  const poolError = checkString(pendingInfo['pool-error']);\n  const txn = pendingInfo.txn;\n  const confirmedRound =\n    'confirmed-round' in pendingInfo\n      ? checkNumber(pendingInfo['confirmed-round'])\n      : undefined;\n\n  return { poolError, txn, confirmedRound };\n};\n\nconst checkNumber = (value: unknown): number => {\n  if (typeof value === 'number') {\n    return value;\n  } else {\n    const message = `waitForConfirmation: expected number, got ${typeof value}`;\n    console.error(message, value);\n    throw new TypeError(`${message}: ${value}`);\n  }\n};\nconst checkString = (value: unknown): string => {\n  if (typeof value === 'string') {\n    return value;\n  } else {\n    const message = `waitForConfirmation: expected string, got ${typeof value}`;\n    console.error(message, value);\n    throw new TypeError(`${message}: ${value}`);\n  }\n};\n\n// Extract a single asset balance from an `AccountData` result.\nexport const extractAlgorandAssetBalance = (\n  algorandAccount: AccountData,\n  assetId: number\n) => {\n  for (const asset of defined(algorandAccount?.assets)) {\n    if (asset['asset-id'] === assetId) {\n      return noBigintSupport(asset.amount);\n    }\n  }\n  return null;\n};\n\n// Panic if value is `bigint`, for now.\nexport const noBigintSupport = (value: number | bigint): number => {\n  if (typeof value === 'bigint') {\n    throw panic('bigint support not implemented yet', value);\n  }\n  return value;\n};\n\n// XXX(Pi): Algosdk does not seem to expose the network (dashed-identifier) versions of these types,\n//          so define a subset here.\n//\n// XXX(Pi): Several of the `number` types below rely on the algosdk client being configured with IntDecoding.SAFE for correctness.\n//\n// TODO(Pi): See <https://github.com/ntls-io/nautilus-wallet/issues/165>\n//           (Clean up `algosdk.utils` (network representation type handling) #165)\n\n/**\n * Account information at a given round.\n *\n * @see https://developer.algorand.org/docs/reference/rest-apis/algod/v2/#account\n */\nexport type AccountData = {\n  // the account public key\n  address: string;\n\n  // total number of MicroAlgos in the account\n  amount: number;\n\n  // assets held by this account\n  assets?: AssetHolding[];\n};\n\n/**\n * Describes an asset held by an account.\n *\n * @see https://developer.algorand.org/docs/rest-apis/algod/v2/#assetholding\n */\nexport type AssetHolding = {\n  // number of units held\n  amount: number;\n\n  // Asset ID of the holding\n  'asset-id': number;\n\n  creator?: string;\n\n  // whether or not the holding is frozen\n  'is-frozen': boolean;\n};\n\n/**\n * Specifies the parameters for an asset.\n *\n * @see https://developer.algorand.org/docs/rest-apis/algod/v2/#assetparams\n */\nexport type AssetParams = {\n  // The address that created this asset\n  creator: string;\n\n  // The number of digits to use after the decimal point when displaying this asset.\n  decimals: number;\n\n  // Name of this asset, as supplied by the creator.\n  name?: string;\n\n  // Base64 encoded name of this asset, as supplied by the creator.\n  'name-b64'?: string;\n\n  // Name of a unit of this asset, as supplied by the creator.\n  'unit-name'?: string;\n\n  // Base64 encoded name of a unit of this asset, as supplied by the creator.\n  'unit-name-b64'?: string;\n\n  // The total number of units of this asset.\n  total: number;\n\n  // URL where more information about the asset can be retrieved.\n  url?: string;\n\n  // Base64 encoded URL where more information about the asset can be retrieved.\n  'url-base64'?: string;\n\n  // A commitment to some unspecified asset metadata.\n  'metadata-hash'?: string;\n};\n\n/**\n * Specifies both the unique identifier and the parameters for an asset.\n *\n * @see https://developer.algorand.org/docs/rest-apis/algod/v2/#asset\n */\nexport type Asset = {\n  // unique asset identifier\n  index: number;\n\n  params: AssetParams;\n};\n\n/** Type alias for Algos. */\nexport type Algos = number;\n\n/** Type alias for MicroAlgos. */\nexport type MicroAlgos = number;\n\n/**\n * Convert MicroAlgos to Algos.\n *\n * (Type alias for {@link microalgosToAlgos}.)\n */\nexport const convertToAlgos = (microAlgos: MicroAlgos): Algos =>\n  microalgosToAlgos(microAlgos);\n\n/**\n * Convert Algos to MicroAlgos.\n *\n * (Type alias for {@link algosToMicroalgos}.)\n */\nexport const convertToMicroAlgos = (algos: Algos): MicroAlgos =>\n  algosToMicroalgos(algos);\n","import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { combineLatest, distinctUntilChanged, map, Observable } from 'rxjs';\nimport {\n  Algos,\n  AssetHolding,\n  convertToAlgos,\n  extractAlgorandAssetBalance,\n  MicroAlgos,\n} from 'src/app/services/algosdk.utils';\nimport { assetAmountAlgo } from 'src/app/utils/assets/assets.algo';\nimport { convertFromLedgerToAssetAmountAsa } from 'src/app/utils/assets/assets.algo.asa';\nimport { AssetAmount } from 'src/app/utils/assets/assets.common';\nimport { assetAmountXrp } from 'src/app/utils/assets/assets.xrp';\nimport { assetAmountXrplToken } from 'src/app/utils/assets/assets.xrp.token';\nimport { defined } from 'src/app/utils/errors/panic';\nimport { parseNumber } from 'src/app/utils/validators';\nimport { allDefinedOrNone, ifDefined, ignoreZero } from 'src/helpers/helpers';\nimport { OnfidoCheckResult } from 'src/schema/actions';\nimport { WalletDisplay } from 'src/schema/entities';\nimport { SessionState, SessionStore } from './session.store';\n\n/**\n * Application code should use this interface to query the session store.\n */\n@Injectable({ providedIn: 'root' })\nexport class SessionQuery extends Query<SessionState> {\n  wallet: Observable<SessionState['wallet']> = this.select('wallet');\n  pin: Observable<SessionState['pin']> = this.select('pin');\n\n  algorandAccountData: Observable<SessionState['algorandAccountData']> =\n    this.select('algorandAccountData');\n\n  xrplAccountRoot: Observable<SessionState['xrplAccountRoot']> =\n    this.select('xrplAccountRoot');\n\n  xrplTrustlines: Observable<SessionState['xrplTrustlines']> =\n    this.select('xrplTrustlines');\n\n  // Wallet field queries:\n\n  walletId: Observable<WalletDisplay['wallet_id'] | undefined> = this.select(\n    ({ wallet }) => wallet?.wallet_id\n  );\n  name: Observable<WalletDisplay['owner_name'] | undefined> = this.select(\n    ({ wallet }) => wallet?.owner_name\n  );\n  algorandAddressBase32: Observable<\n    WalletDisplay['algorand_address_base32'] | undefined\n  > = this.select(({ wallet }) => wallet?.algorand_address_base32);\n\n  // Algorand account field queries:\n\n  algorandBalanceInMicroAlgos: Observable<MicroAlgos | undefined> = this.select(\n    ({ algorandAccountData }) => ignoreZero(algorandAccountData?.amount)\n  );\n\n  algorandBalanceInAlgos: Observable<Algos | undefined> = this.select(\n    ({ algorandAccountData }) =>\n      ifDefined(ignoreZero(algorandAccountData?.amount), convertToAlgos)\n  );\n\n  algorandAlgoBalance: Observable<AssetAmount | undefined> = this.select(\n    ({ algorandAccountData }) =>\n      ifDefined(ignoreZero(algorandAccountData?.amount), (amount: MicroAlgos) =>\n        assetAmountAlgo(convertToAlgos(amount))\n      )\n  );\n\n  algorandAssetBalances: Observable<AssetAmount[] | undefined> = this.select(\n    ({ algorandAccountData, algorandAssetParams }) =>\n      ifDefined(algorandAccountData?.assets, (assetHoldings) =>\n        allDefinedOrNone(\n          // Look up each asset holding's info in algorandAssetParams.\n          assetHoldings.map(({ amount, 'asset-id': assetId }: AssetHolding) =>\n            ifDefined(algorandAssetParams?.[assetId], (assetParams) =>\n              ifDefined(\n                assetParams?.['unit-name'],\n                (unitName): AssetAmount =>\n                  convertFromLedgerToAssetAmountAsa({\n                    amount,\n                    assetId,\n                    unitName,\n                    decimals: assetParams.decimals,\n                  })\n              )\n            )\n          )\n        )\n      )\n  );\n\n  algorandBalances: Observable<AssetAmount[]> = combineLatest([\n    this.algorandAlgoBalance,\n    this.algorandAssetBalances,\n  ]).pipe(\n    map(\n      ([algoBalance, assetBalances]: [\n        AssetAmount | undefined,\n        AssetAmount[] | undefined\n      ]) => [\n        ...(algoBalance !== undefined ? [algoBalance] : []),\n        ...(assetBalances ?? []),\n      ]\n    ),\n    distinctUntilChanged()\n  );\n\n  xrplBalances: Observable<AssetAmount[] | undefined> = this.select(\n    ({ xrplBalances }) =>\n      ifDefined(xrplBalances, (balances) =>\n        balances.map(({ value, currency, issuer }): AssetAmount => {\n          const amount = defined(\n            parseNumber(value),\n            `SessionQuery.xrplBalances: bad number: ${value}`\n          );\n          return currency === 'XRP'\n            ? assetAmountXrp(amount)\n            : assetAmountXrplToken(amount, {\n                currency,\n                issuer: defined(\n                  issuer,\n                  `SessionQuery.xrplBalances: unexpected undefined issuer for XRPL token currency ${currency}`\n                ),\n              });\n        })\n      )\n  );\n\n  allBalances: Observable<AssetAmount[]> = combineLatest([\n    this.algorandAlgoBalance,\n    this.algorandAssetBalances,\n    this.xrplBalances,\n  ]).pipe(\n    map(\n      ([algorandAlgoBalance, algorandAssetBalances, xrplBalances]: [\n        AssetAmount | undefined,\n        AssetAmount[] | undefined,\n        AssetAmount[] | undefined\n      ]) => [\n        ...(algorandAlgoBalance !== undefined ? [algorandAlgoBalance] : []),\n        ...(algorandAssetBalances ?? []),\n        ...(xrplBalances ?? []),\n      ]\n    ),\n    distinctUntilChanged()\n  );\n\n  onfidoCheck: Observable<SessionState['onfidoCheck']> =\n    this.select('onfidoCheck');\n\n  onfidoCheckIsClear: Observable<boolean> = this.onfidoCheck.pipe(\n    map((onfidoCheck?: OnfidoCheckResult) => onfidoCheck?.result === 'clear')\n  );\n\n  constructor(protected store: SessionStore) {\n    super(store);\n  }\n\n  // Non-observable accessors:\n\n  getAlgorandBalanceInMicroAlgos(): MicroAlgos | undefined {\n    return ignoreZero(this.getValue().algorandAccountData?.amount);\n  }\n\n  getAlgorandBalanceInAlgos(): Algos | undefined {\n    return ifDefined(\n      ignoreZero(this.getValue().algorandAccountData?.amount),\n      convertToAlgos\n    );\n  }\n\n  getAlgorandAssetHoldings(): AssetHolding[] | undefined {\n    return this.getValue().algorandAccountData?.assets;\n  }\n\n  hasAlgorandBalance() {\n    return 0 < (this.getAlgorandBalanceInMicroAlgos() ?? 0);\n  }\n\n  getXrpBalanceInDrops(): number | undefined {\n    return ifDefined(this.getValue().xrplAccountRoot?.Balance, parseNumber);\n  }\n\n  hasXrpBalance() {\n    return 0 < (this.getXrpBalanceInDrops() ?? 0);\n  }\n\n  /**\n   * Get the current Algorand account's balance for the given ASA.\n   *\n   * @return 0 if a zero-balance asset holding exists (account is opted-in to the ASA)\n   * @return null if no asset holding exists (account is not opted-in to the ASA)\n   *\n   * @throws Error if `sessionStore.algorandAccountData` is not defined\n   */\n  getAlgorandAssetBalance(assetId: number): null | number {\n    return extractAlgorandAssetBalance(\n      defined(this.getValue().algorandAccountData),\n      assetId\n    );\n  }\n\n  hasAlgorandAssetBalance(assetId: number): boolean {\n    return this.getAlgorandAssetBalance(assetId) !== null;\n  }\n\n  /**\n   * Helper: True if the store contains an active user session.\n   */\n  isActiveSession() {\n    const { wallet, pin } = this.getValue();\n    return wallet !== undefined && pin !== undefined;\n  }\n\n  /**\n   * Helper: Return the current session's wallet + PIN, assuming it's active.\n   *\n   * @throws {Error} if a session isn't active.\n   */\n  assumeActiveSession(): Required<Pick<SessionState, 'wallet' | 'pin'>> {\n    const prefix = 'SessionAlgorandService.assumeSession: invalid state';\n    const { wallet, pin } = this.getValue();\n    return {\n      wallet: defined(wallet, `${prefix}: wallet not defined`),\n      pin: defined(pin, `${prefix}: pin not defined`),\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\nimport { AccountData, AssetParams } from 'src/app/services/algosdk.utils';\nimport { OnfidoCheckResult } from 'src/schema/actions';\nimport { WalletDisplay } from 'src/schema/entities';\nimport * as xrpl from 'xrpl';\nimport { Trustline } from 'xrpl/dist/npm/models/methods/accountLines';\n\n/**\n * State stored for a user session.\n *\n * This state should represent the domain data types faithfully where possible,\n * without unnecessary restructuring.\n */\nexport interface SessionState {\n  /**\n   * The current session's wallet details, as loaded from the wallet enclave.\n   *\n   * @see SessionService\n   */\n  wallet?: WalletDisplay;\n\n  /**\n   * The current session's user-supplied authentication PIN.\n   */\n  pin?: string;\n\n  /**\n   * The current session's Algorand account details, as loaded from Algod.\n   *\n   * @see import('./session-algorand.service').SessionAlgorandService\n   */\n  algorandAccountData?: AccountData;\n\n  /**\n   * Asset parameters of interest to the current session.\n   *\n   * @see import('./session-algorand.service').SessionAlgorandService.loadAssetParams\n   */\n  algorandAssetParams?: Record<number, AssetParams>;\n\n  /**\n   * The current session's XRPL account root ledger entry.\n   *\n   * @see import('./session-xrpl.service').SessionXrplService\n   * @see https://js.xrpl.org/interfaces/LedgerEntry.AccountRoot.html\n   */\n  xrplAccountRoot?: xrpl.LedgerEntry.AccountRoot;\n\n  /**\n   * The current session's XRPL trust lines.\n   *\n   * @see import('./session-xrpl.service').SessionXrplService\n   * @see https://xrpl.org/account_lines.html#response-format\n   * @see https://js.xrpl.org/interfaces/AccountLinesResponse.html#result\n   */\n  xrplTrustlines?: Trustline[];\n\n  /**\n   * The current session's XRPL balances.\n   *\n   * @see import('./session-xrpl.service').SessionXrplService\n   * @see https://js.xrpl.org/classes/Client.html#getBalances\n   */\n  xrplBalances?: XrplBalance[];\n\n  onfidoCheck?: OnfidoCheckResult;\n}\n\nexport type XrplBalance = {\n  value: string;\n  currency: string;\n  issuer?: string | undefined;\n};\n\nexport const createInitialState = (): SessionState => ({});\n\n/**\n * This store holds the data for a user session.\n *\n * Application code should avoid using {@link SessionStore} interface directly:\n * prefer using the {@link SessionQuery} and {@link import('./session.service').SessionService} interfaces instead.\n */\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'session', resettable: true })\nexport class SessionStore extends Store<SessionState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable, NgModule } from '@angular/core';\nimport {\n  getBrowserLang,\n  Translation,\n  translocoConfig,\n  TranslocoLoader,\n  TranslocoModule,\n  TRANSLOCO_CONFIG,\n  TRANSLOCO_LOADER,\n} from '@ngneat/transloco';\nimport { environment } from '../../environments/environment';\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string) {\n    return this.http.get<Translation>(`/assets/i18n/${lang}.json`);\n  }\n}\n\n@NgModule({\n  exports: [TranslocoModule],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['en', 'fr'],\n        defaultLang: getBrowserLang() || 'en',\n        fallbackLang: 'en',\n        // Remove this option if your application doesn't support changing language in runtime.\n        reRenderOnLangChange: true,\n        prodMode: environment.production,\n      }),\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoHttpLoader },\n  ],\n})\nexport class TranslocoRootModule {}\n","/**\n * Types and code for working with ASAs on the Algorand ledger.\n *\n * 1. {@link AssetDisplay}: use common base type.\n * 2. {@link LedgerInfo} constructor: {@link ledgerInfoAsa}\n * 3. {@link AssetAmount} constructor: {@link assetAmountAsa}\n */\n\nimport { LedgerTypeAlgorand, LEDGER_TYPE_ALGORAND } from './assets.algo';\nimport { AssetAmount, LedgerInfo } from './assets.common';\n\n// LedgerInfo:\n\nexport type LedgerInfoAsa = LedgerInfo & {\n  type: LedgerTypeAlgorand;\n  isAsa: true;\n  assetId: number;\n  decimals: number;\n};\n\nexport const ledgerInfoAsa = (\n  assetId: number,\n  decimals: number\n): LedgerInfoAsa => ({\n  type: LEDGER_TYPE_ALGORAND,\n  isAsa: true,\n  assetId,\n  decimals,\n});\n\n// AssetAmount:\n\nexport type AssetAmountAsa = AssetAmount & {\n  ledgerInfo: LedgerInfoAsa;\n};\n\nexport const assetAmountAsa = (\n  amount: number,\n  {\n    assetSymbol,\n    assetId,\n    decimals,\n  }: { assetSymbol: string; assetId: number; decimals: number }\n): AssetAmountAsa => ({\n  amount,\n  assetDisplay: { assetSymbol, minDigits: 0, maxDigits: decimals },\n  ledgerInfo: ledgerInfoAsa(assetId, decimals),\n});\n\n// Type checks:\n\nexport const isLedgerInfoAsa = (\n  ledgerInfo: LedgerInfo | LedgerInfoAsa\n): ledgerInfo is LedgerInfoAsa =>\n  ledgerInfo.type === LEDGER_TYPE_ALGORAND &&\n  'isAsa' in ledgerInfo &&\n  ledgerInfo.isAsa &&\n  'assetId' in ledgerInfo &&\n  'decimals' in ledgerInfo;\n\nexport const isAssetAmountAsa = (\n  amount: AssetAmount\n): amount is AssetAmountAsa => isLedgerInfoAsa(amount.ledgerInfo);\n\n// Ledger representation conversion:\n\n/**\n * The ledger representation of an ASA amount and metadata.\n */\nexport type LedgerAmountAsa = {\n  /** Amount in integer base units, as stored on the ledger. */\n  amount: number;\n\n  assetId: number;\n  unitName: string;\n  decimals: number;\n};\n\nexport const convertFromLedgerToAssetAmountAsa = (\n  ledgerAmount: LedgerAmountAsa\n): AssetAmountAsa => {\n  const { amount, assetId, unitName, decimals } = ledgerAmount;\n  return assetAmountAsa(amount / 10 ** decimals, {\n    assetSymbol: unitName,\n    assetId,\n    decimals,\n  });\n};\n\nexport const convertFromAssetAmountAsaToLedger = (\n  assetAmount: AssetAmountAsa\n): LedgerAmountAsa => {\n  const {\n    amount,\n    assetDisplay: { assetSymbol },\n    ledgerInfo: { assetId, decimals },\n  } = assetAmount;\n  return {\n    amount: amount * 10 ** decimals,\n    assetId,\n    unitName: assetSymbol,\n    decimals,\n  };\n};\n","/**\n * Types and code for working with Algo on the Algorand ledger.\n *\n * 1. {@link AssetDisplay} constant: {@link ASSET_DISPLAY_ALGO}\n * 2. {@link LedgerInfo} constant: {@link LEDGER_INFO_ALGO}\n * 3. {@link AssetAmount} constructor: {@link assetAmountAlgo}\n */\n\nimport { AssetAmount, AssetDisplay, LedgerInfo } from './assets.common';\n\n// AssetDisplay:\n\nexport type AssetSymbolAlgo = 'ALGO';\n\nexport const ASSET_SYMBOL_ALGO: AssetSymbolAlgo = 'ALGO';\n\nexport type AssetDisplayAlgo = AssetDisplay & {\n  assetSymbol: AssetSymbolAlgo;\n  maxDigits: 6;\n};\n\nexport const ASSET_DISPLAY_ALGO: AssetDisplayAlgo = {\n  assetSymbol: ASSET_SYMBOL_ALGO,\n  minDigits: 0,\n  maxDigits: 6,\n};\n\n// LedgerInfo:\n\nexport type LedgerTypeAlgorand = 'Algorand';\n\nexport const LEDGER_TYPE_ALGORAND: LedgerTypeAlgorand = 'Algorand';\n\nexport type LedgerInfoAlgo = LedgerInfo & {\n  type: LedgerTypeAlgorand;\n  isAlgo: true;\n};\n\nexport const LEDGER_INFO_ALGO: LedgerInfoAlgo = {\n  type: LEDGER_TYPE_ALGORAND,\n  isAlgo: true,\n};\n\n// AssetAmount:\n\nexport type AssetAmountAlgo = AssetAmount & {\n  assetDisplay: AssetDisplayAlgo;\n  ledgerInfo: LedgerInfoAlgo;\n};\n\nexport const assetAmountAlgo = (amount: number): AssetAmountAlgo => ({\n  amount,\n  assetDisplay: ASSET_DISPLAY_ALGO,\n  ledgerInfo: LEDGER_INFO_ALGO,\n});\n\n// Type checks:\n\nexport const isLedgerInfoAlgo = (\n  ledgerInfo: LedgerInfo | LedgerInfoAlgo\n): ledgerInfo is LedgerInfoAlgo =>\n  ledgerInfo.type === LEDGER_TYPE_ALGORAND &&\n  'isAlgo' in ledgerInfo &&\n  ledgerInfo.isAlgo;\n\nexport const isAssetAmountAlgo = (\n  amount: AssetAmount | AssetAmountAlgo\n): amount is AssetAmountAlgo =>\n  amount.ledgerInfo.type === LEDGER_TYPE_ALGORAND &&\n  amount.assetDisplay.assetSymbol === ASSET_SYMBOL_ALGO;\n","/**\n * Types and code for working with tokens on the XRP ledger.\n *\n * 1. {@link AssetDisplay}: use common base type.\n * 2. {@link LedgerInfo} constructor: {@link ledgerInfoXrplToken}\n * 3. {@link AssetAmount} constructor: {@link assetAmountXrplToken}\n */\n\nimport { defined } from 'src/app/utils/errors/panic';\nimport { parseNumber } from 'src/app/utils/validators';\nimport { IssuedCurrencyAmount } from 'xrpl/dist/npm/models/common/index';\nimport { AssetAmount, LedgerInfo } from './assets.common';\nimport { LedgerTypeXrpl, LEDGER_TYPE_XRPL } from './assets.xrp';\n\n// LedgerInfo:\n\nexport type LedgerInfoXrplToken = LedgerInfo & {\n  type: LedgerTypeXrpl;\n  isToken: true;\n  currency: string;\n  issuer: string;\n};\n\nexport const ledgerInfoXrplToken = (\n  currency: string,\n  issuer: string\n): LedgerInfoXrplToken => ({\n  type: LEDGER_TYPE_XRPL,\n  isToken: true,\n  currency,\n  issuer,\n});\n\n// AssetAmount:\n\nexport type AssetAmountXrplToken = AssetAmount & {\n  ledgerInfo: LedgerInfoXrplToken;\n};\n\nexport const assetAmountXrplToken = (\n  amount: number,\n  { currency, issuer }: { currency: string; issuer: string }\n): AssetAmountXrplToken => ({\n  amount,\n  assetDisplay: { assetSymbol: currency, minDigits: 0, maxDigits: 3 },\n  ledgerInfo: ledgerInfoXrplToken(currency, issuer),\n});\n\n// Type checks:\n\nexport const isLedgerInfoXrplToken = (\n  ledgerInfo: LedgerInfo | LedgerInfoXrplToken\n): ledgerInfo is LedgerInfoXrplToken =>\n  ledgerInfo.type === LEDGER_TYPE_XRPL &&\n  'isToken' in ledgerInfo &&\n  ledgerInfo.isToken &&\n  'currency' in ledgerInfo;\n\nexport const isAssetAmountXrplToken = (\n  amount: AssetAmount\n): amount is AssetAmountXrplToken => isLedgerInfoXrplToken(amount.ledgerInfo);\n\n// Ledger representation conversion:\n\nexport const convertFromLedgerToAssetAmountXrplToken = (\n  ledgerAmount: IssuedCurrencyAmount\n): AssetAmountXrplToken => {\n  const { currency, issuer, value } = ledgerAmount;\n  const amount = defined(parseNumber(value), `bad number: ${value}`);\n  return assetAmountXrplToken(amount, { currency, issuer });\n};\n\nexport const convertFromAssetAmountXrplTokenToLedger = (\n  assetAmount: AssetAmountXrplToken\n): IssuedCurrencyAmount => {\n  const {\n    amount,\n    ledgerInfo: { currency, issuer },\n  } = assetAmount;\n  return { currency, issuer, value: amount.toString() };\n};\n","/**\n * Types and code for working with XRP on the XRP ledger.\n *\n * 1. {@link AssetDisplay} constant: {@link ASSET_DISPLAY_XRP}\n * 2. {@link LedgerInfo} constant: {@link LEDGER_INFO_XRP}\n * 3. {@link AssetAmount} constructor: {@link assetAmountXrp}\n */\nimport { defined } from 'src/app/utils/errors/panic';\nimport { parseNumber } from 'src/app/utils/validators';\nimport * as xrpl from 'xrpl';\nimport { AssetAmount, AssetDisplay, LedgerInfo } from './assets.common';\n\n// AssetDisplay:\n\nexport type AssetSymbolXrp = 'XRP';\n\nexport const ASSET_SYMBOL_XRP: AssetSymbolXrp = 'XRP';\n\nexport type AssetDisplayXrp = AssetDisplay & {\n  assetSymbol: AssetSymbolXrp;\n  maxDigits: 6;\n};\n\nexport const ASSET_DISPLAY_XRP: AssetDisplayXrp = {\n  assetSymbol: ASSET_SYMBOL_XRP,\n  minDigits: 0,\n  maxDigits: 6,\n};\n\n// LedgerInfo:\n\nexport type LedgerTypeXrpl = 'XRPL';\n\nexport const LEDGER_TYPE_XRPL: LedgerTypeXrpl = 'XRPL';\n\nexport type LedgerInfoXrp = LedgerInfo & {\n  type: LedgerTypeXrpl;\n  isXrp: true;\n};\n\nexport const LEDGER_INFO_XRP: LedgerInfoXrp = {\n  type: LEDGER_TYPE_XRPL,\n  isXrp: true,\n};\n\n// AssetAmount:\n\nexport type AssetAmountXrp = AssetAmount & {\n  assetDisplay: AssetDisplayXrp;\n  ledgerInfo: LedgerInfoXrp;\n};\n\nexport const assetAmountXrp = (amount: number): AssetAmountXrp => ({\n  amount,\n  assetDisplay: ASSET_DISPLAY_XRP,\n  ledgerInfo: LEDGER_INFO_XRP,\n});\n\n// Type checks:\n\nexport const isLedgerInfoXrp = (\n  ledgerInfo: LedgerInfo | LedgerInfoXrp\n): ledgerInfo is LedgerInfoXrp =>\n  ledgerInfo.type === LEDGER_TYPE_XRPL &&\n  'isXrp' in ledgerInfo &&\n  ledgerInfo.isXrp;\n\nexport const isAssetAmountXrp = (\n  amount: AssetAmount | AssetAmountXrp\n): amount is AssetAmountXrp =>\n  amount.ledgerInfo.type === LEDGER_TYPE_XRPL &&\n  amount.assetDisplay.assetSymbol === ASSET_SYMBOL_XRP;\n\n// Ledger representation conversion:\n\nexport const convertFromLedgerToAssetAmountXrp = (\n  ledgerAmount: string\n): AssetAmountXrp =>\n  assetAmountXrp(\n    defined(\n      parseNumber(xrpl.dropsToXrp(ledgerAmount)),\n      `bad number: ${ledgerAmount}`\n    )\n  );\n\nexport const convertFromAssetAmountXrpToLedger = (\n  assetAmount: AssetAmountXrp\n): string => xrpl.xrpToDrops(assetAmount.amount);\n","import { ErrorHandler, Injectable, NgZone } from '@angular/core';\nimport { NavController } from '@ionic/angular';\nimport * as Sentry from '@sentry/angular';\nimport { SwalHelper } from '../notification/swal-helper';\n\n@Injectable()\nexport class GlobalErrorHandler implements ErrorHandler {\n  constructor(\n    private zone: NgZone,\n    private notification: SwalHelper,\n    private navCtrl: NavController\n  ) {}\n\n  handleError(error: Error) {\n    if (error.message.includes('setOptions failed')) {\n      // XXX: Work around: Uncaught (in promise) DOMException: setOptions failed #297\n      //      https://github.com/zxing-js/ngx-scanner/issues/297\n      console.warn('GlobalErrorHandler ignoring:', error);\n      return;\n    }\n\n    console.error('GlobalErrorHandler:', error);\n    Sentry.captureException(error);\n    this.zone.run(\n      async () =>\n        await this.notification.swal\n          .fire({\n            icon: 'error',\n            text: 'Unexpected Error Occurred',\n          })\n          .then(() => {\n            // XXX: See also modal closing code in LandingPage\n            this.navCtrl.navigateRoot('');\n          })\n    );\n  }\n}\n","/**\n * Helper for unrecoverable errors: Log an error message and inspectable value, and abort.\n *\n * @throws Error with `message`\n */\nexport const panic = (message: string, value: unknown): never => {\n  console.error(message, value);\n  throw new Error(message);\n};\n\n/**\n * Return defined value or panic.\n */\nexport const defined = <T>(value: T | undefined, message?: string): T => {\n  if (value !== undefined) {\n    return value;\n  } else {\n    throw panic(message ?? 'unexpected undefined', value);\n  }\n};\n","import { Injectable } from '@angular/core';\nimport Swal from 'sweetalert2';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SwalHelper {\n  public swal = Swal.mixin({\n    confirmButtonColor: 'var(--ion-color-primary)',\n    customClass: {\n      actions: '!w-full',\n      confirmButton: 'w-1/2 !rounded-full',\n      title: 'font-nasalization',\n    },\n    backdrop: true,\n    heightAuto: false,\n    allowOutsideClick: false,\n  });\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\n/**\n * Safely parse untrusted user input to a `number`.\n *\n * This uses JSON-compatible definition \"number\".\n */\nexport const parseNumber = (text?: string): number | undefined => {\n  const result = text !== undefined ? tryJsonParse(text) : undefined;\n  return typeof result === 'number' ? result : undefined;\n};\n\nconst tryJsonParse = (text: string): any => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    if (err instanceof SyntaxError) {\n      return undefined;\n    } else {\n      throw err;\n    }\n  }\n};\n\n/**\n * Validate values that can be parsed with {@link parseNumber}.\n *\n * (Note: This is named \"numeric\" rather than \"number\" because the latter is a blacklisted identifier.)\n */\nexport const numericValidator: ValidatorFn = (\n  control: AbstractControl\n): NumericValidationError | null => {\n  if (typeof control.value === 'string') {\n    return parseNumber(control.value) === undefined ? { numeric: true } : null;\n  } else {\n    throw new TypeError(\n      `numberValidator: expected string value, got ${typeof control.value}`\n    );\n  }\n};\n\n/** @see numericValidator*/\nexport type NumericValidationError = {\n  numeric: true;\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nimport { Environment } from 'src/environments/types';\n\nexport const environment: Environment = {\n  production: false,\n\n  // Enable persistence for easier development.\n  persistAkitaState: true,\n\n  nautilusWalletServer: 'http://localhost:4200/api/nautilus/',\n  nautilusAssetServices: 'http://localhost:4200/api/asset-services/',\n  // See `proxyConfig` in `angular.json`, and `proxy.conf.json`\n  // Docs: https://angular.io/guide/build#proxying-to-a-backend-server\n  algod: {\n    // XXX: Algodv2's parameter handling is a bit weird: the HTTP port must be passed separately.\n    baseServer: 'http://localhost/api/algorand',\n    port: 4200,\n    // FIXME: Development key\n    token: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n  },\n\n  xrplClient: {\n    server: 'ws://localhost:4200/api/xrpl',\n    options: {\n      connectionTimeout: 20000,\n    },\n  },\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","/**\n * General helper code.\n */\n\n/**\n * Helper for exhaustiveness checking: mark unreachable values.\n */\nexport const never = (value: never): never => {\n  console.error('expected never, got:', value);\n  throw new TypeError('expected never, got value (see error log)');\n};\n\n/**\n * Apply `f` to an optional `value`.\n *\n * This works like nullish coalescing and optional chaining, but for a function argument.\n */\nexport const ifDefined = <T, R>(\n  value: T | null | undefined,\n  f: (v: T) => R\n): R | undefined =>\n  value === null || value === undefined ? undefined : f(value);\n\n/**\n * Verify that all items in a list are defined, or return `undefined`.\n */\nexport const allDefinedOrNone = <T>(\n  values: (T | undefined)[]\n): T[] | undefined =>\n  values.every((v) => v !== undefined) ? (values as T[]) : undefined;\n\n/**\n * Return `n` if non-zero, otherwise `undefined`.\n */\nexport const ignoreZero = (n?: number): number | undefined =>\n  n === 0 ? undefined : n;\n\nexport type Constructor<T> = new (...args: any[]) => T;\n\n/**\n * Helper: Check that o is an instance of the given class.\n */\nexport const checkClass = <T>(o: unknown, cls: Constructor<T>): T => {\n  if (o instanceof cls) {\n    return o;\n  } else {\n    const oClsName = (o as any)?.constructor?.name;\n    throw new TypeError(`expected ${cls.name}, got ${oClsName}: ${o}`);\n  }\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableAkitaProdMode, persistState } from '@datorama/akita';\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n  enableAkitaProdMode();\n}\n\nif (environment.persistAkitaState) {\n  persistState({});\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.log(err));\n\ndefineCustomElements(window);\n","var map = {\n\t\"./ion-accordion_2.entry.js\": [\n\t\t470,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-accordion_2_entry_js\"\n\t],\n\t\"./ion-action-sheet.entry.js\": [\n\t\t22725,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-action-sheet_entry_js\"\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t36149,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-alert_entry_js\"\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t19288,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-app_8_entry_js\"\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t61031,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-avatar_3_entry_js\"\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t58310,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-back-button_entry_js\"\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t47653,\n\t\t\"node_modules_ionic_core_dist_esm_ion-backdrop_entry_js\"\n\t],\n\t\"./ion-breadcrumb_2.entry.js\": [\n\t\t17039,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-breadcrumb_2_entry_js\"\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t57945,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-button_2_entry_js\"\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t8714,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-card_5_entry_js\"\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t31786,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-checkbox_entry_js\"\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t24702,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-chip_entry_js\"\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t94094,\n\t\t\"node_modules_ionic_core_dist_esm_ion-col_3_entry_js\"\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t50795,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-datetime_3_entry_js\"\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t36976,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-fab_3_entry_js\"\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t51417,\n\t\t\"node_modules_ionic_core_dist_esm_ion-img_entry_js\"\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t78412,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-infinite-scroll_2_entry_js\"\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t94706,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-input_entry_js\"\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t73459,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-item-option_3_entry_js\"\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t23354,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-item_8_entry_js\"\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t41025,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-loading_entry_js\"\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t98592,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-menu_3_entry_js\"\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t52526,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-modal_entry_js\"\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t92447,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-nav_2_entry_js\"\n\t],\n\t\"./ion-picker-column-internal.entry.js\": [\n\t\t8823,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-picker-column-internal_entry_js\"\n\t],\n\t\"./ion-picker-internal.entry.js\": [\n\t\t83212,\n\t\t\"node_modules_ionic_core_dist_esm_ion-picker-internal_entry_js\"\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t87557,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-popover_entry_js\"\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t28692,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-progress-bar_entry_js\"\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t93544,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-radio_2_entry_js\"\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t40042,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-range_entry_js\"\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t70718,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-refresher_2_entry_js\"\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t95981,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-reorder_2_entry_js\"\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t76488,\n\t\t\"node_modules_ionic_core_dist_esm_ion-ripple-effect_entry_js\"\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t47937,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-route_4_entry_js\"\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t50942,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-searchbar_entry_js\"\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t20816,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-segment_2_entry_js\"\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t19062,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-select_3_entry_js\"\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t13466,\n\t\t\"node_modules_ionic_core_dist_esm_ion-slide_2_entry_js\"\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t18404,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-spinner_entry_js\"\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t60953,\n\t\t\"node_modules_ionic_core_dist_esm_ion-split-pane_entry_js\"\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t44254,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-tab-bar_2_entry_js\"\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t45195,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-tab_2_entry_js\"\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t86116,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-text_entry_js\"\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t79781,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-textarea_entry_js\"\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t48323,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-toast_entry_js\"\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t376,\n\t\t\"common\",\n\t\t\"node_modules_ionic_core_dist_esm_ion-toggle_entry_js\"\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t82072,\n\t\t\"node_modules_ionic_core_dist_esm_ion-virtual-scroll_entry_js\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 50863;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./pwa-action-sheet.entry.js\": [\n\t\t277,\n\t\t\"node_modules_ionic_pwa-elements_dist_esm_pwa-action-sheet_entry_js\"\n\t],\n\t\"./pwa-camera-modal-instance.entry.js\": [\n\t\t12194,\n\t\t\"node_modules_ionic_pwa-elements_dist_esm_pwa-camera-modal-instance_entry_js\"\n\t],\n\t\"./pwa-camera-modal.entry.js\": [\n\t\t82278,\n\t\t\"node_modules_ionic_pwa-elements_dist_esm_pwa-camera-modal_entry_js\"\n\t],\n\t\"./pwa-camera.entry.js\": [\n\t\t66759,\n\t\t\"node_modules_ionic_pwa-elements_dist_esm_pwa-camera_entry_js\"\n\t],\n\t\"./pwa-toast.entry.js\": [\n\t\t16133,\n\t\t\"node_modules_ionic_pwa-elements_dist_esm_pwa-toast_entry_js\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 55899;\nmodule.exports = webpackAsyncContext;","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["algosToMicroalgos","microalgosToAlgos","defined","panic","waitForConfirmation","algodClient","txId","timeoutRounds","lastRound","getLastRound","startRound","endRound","nextRound","pendingInfo","getPendingInfo","poolError","txn","confirmedRound","Error","statusAfterBlock","do","nodeStatus","status","checkNumber","pendingTransactionInformation","checkString","undefined","value","message","console","error","TypeError","extractAlgorandAssetBalance","algorandAccount","assetId","asset","assets","noBigintSupport","amount","convertToAlgos","microAlgos","convertToMicroAlgos","algos","Sentry","GlobalErrorHandler","constructor","zone","notification","navCtrl","handleError","includes","warn","captureException","run","swal","fire","icon","text","then","navigateRoot","i0","factory"],"sourceRoot":"webpack:///"}